@page "/LecturePage/{UserID:int}"
@inject HttpClient Http;
@inject NavigationManager nav;

@using Microsoft.AspNetCore.SignalR.Client;
@implements IAsyncDisposable;
@using NewBlazorProjecct.Shared.DTOs;
@inject IJSRuntime JS





 @if (msg != "") {
    <p style="margin:0;">@msg</p>
}

<div id="FristCanvas" style="display:@firsatCanvasDisplay">

    <h1>הקלד קוד משחק:</h1>
    <input type="number" @bind="playerGameCode" />
    <span>לדוגמה 101</span>
    <button @onclick="GetGame"> כניסה למשחק</button>
    <img class="images" src="./imgs/ballot-box.png" />

</div>





<div class="container" style="display:@containerDisplay;">

    <div class="left-column">
        <div class="left-top">

            <div class="col">
                <div id="ForTable">
                    <table>
                        <thead> <tr>   <th id="pass">עברו</th> <th id="fall">נפלו</th>   </tr> </thead>
                        <tbody> <tr>   <td>@lawAmountPass</td>  <td>@lawAmountNotPass</td>   </tr> </tbody>
                    </table>
                </div>
            </div>


            <div class="col-4">
                <button style="display:@startGameBtnDisplay" @onclick="StartGame">התחל משחק</button>
                <button style="display:@explenationCanvasDisplay" @onclick="DistributePoints">קבלת קולות</button>
                <button style="display:@startVoteBtnDisplay" @onclick="StartTheVote">התחילו!</button>
                <button style="display:@pieChartBtnDisplay" @onclick="TriggerPieChart"> תוצאות! </button>
                <button style="display:@PieChartContainerDisplay" @onclick="callForNextLaw" id="nextLawButton"> בואו נמשיך </button>
                <button style="display:@resultsContainerDisplay" @onclick="BackToStart" id="gameFinished"> חזרה להתחלה </button>
            </div>


        </div>

        <div class="left-middle">
            <p> @characterText </p>
        </div>

        <div class="left-bottom">
            <img src="./imgs/femalediplo.png" alt="myCharacter" />
        </div>
    </div>





    <div class="right-column">
        @if (msg != "") {
            <p style="margin:0;">@msg</p>
        }

        <ul style="display:@groupListDisplay">
            @foreach(Group group in allGroups) {
                <li>
                    <div class="header">
                        <p> @group.GroupName </p>

                    </div>

                    <div class="body">
                        <img src="@group.Character" />
                    </div>

                    <div class="footer">
                        <p> קולות:  @group.Points.ToString() </p>
                    </div>

                </li>
            }
        </ul>

        
        <div id="explenation" style="display:@explenationCanvasDisplay">
                <h1>ברוכים הבאים למליאה!</h1>
                <p>אנו הולכים להצביע על החוקים החדשים ולהשפיע על חיי הכיתה!</p>
                <p>כל קבוצה תקבל מספר קולות אשר ישפיעו על עתידנו.</p>
        </div>





        <div id="voteGameCanvas" style="display:@voteGameCanvasDisplay">


            <div class="row  biggerHalf">



                <div id="LawContentContainer" style="display:@LawContentContainerDisplay">

                    <div class="row half head">
                        <div id="lawWrapper">   <div id="law">@currentLawContent</div>   </div>
                    </div>

                    <div class="row half bottom">
                        <div id="cardsContainer">
                            <button id="Against"> נגד </button>
                            <button id="Avoid"> נמנע </button>
                            <button id="For"> בעד </button>
                        </div>
                    </div>

                </div>

                <div id="PieChartContainer" style="display:@PieChartContainerDisplay">
                    <div id="canvasContainer"> <canvas id="myPieChart"></canvas> </div>
                </div>


            </div>


        </div>

        <!--  RESULTS SCREEN  -->
        <div id="resultsContainer" style="display:@resultsContainerDisplay">
            <div id="ForTable">
                <table>
                    <thead> <tr>   <th id="pass">עברו</th> <th id="fall">נפלו</th>   </tr> </thead>
                    <tbody> <tr>   <td>@lawAmountPass</td>  <td>@lawAmountNotPass</td>   </tr> </tbody>
                </table>
            </div>
        </div>



    </div>



</div>





@code {
    [Parameter]
    public int UserID { get; set; }

    private HubConnection? hub;// the connection to the Hub.
                               // Group myGroup = new Group(); // My user, will save the id.
    string ConnectionID;
    bool logged = false;
    List<Group> allGroups = new List<Group>();// list for all the users.

    int playerGameCode = 0;// the code from the input of the player.
    string msg;// handle the error msg.
    Game myGame = new Game(); // containe the game withe the laws.


    // display divs.
    string firsatCanvasDisplay = "flex";
    string containerDisplay = "none";
    string explenationCanvasDisplay = "none";
    string voteGameCanvasDisplay = "none"; 
    string groupListDisplay = "none";

    // display buttons
    string startGameBtnDisplay = "none";
    string startVoteBtnDisplay = "none";
    string pieChartBtnDisplay = "none";

    // check if they exist.
    string LawContentContainerDisplay = "flex";
    string PieChartContainerDisplay = "none";
    string resultsContainerDisplay = "none";


    // string gotVotesDisplay = "none";

    string currentLawContent = "the law content will be here";
    int lawCounter = 0;
    int lawAmountPass = 0;
    int lawAmountNotPass = 0;
    string characterText = "ברוכים הבאים למליאה";

    // bool showPopUp = false;

    protected override async Task OnInitializedAsync() {
        // make a connection.
        hub = new HubConnectionBuilder()
            .WithUrl(nav.ToAbsoluteUri("./chathub"))
            .WithAutomaticReconnect()
            .Build();

        await hub.StartAsync(); // start connection.
        if (hub != null) {
            ConnectionID = hub.ConnectionId;
            // hub.Reconnected += (newConnectionId) => ReConnect(newConnectionId);
        }

        // when someone login we get the user detailes and add it to the user list(to show it on screen).
        hub.On<Group>("GroupLogin", newGroup => {
            allGroups.Add(newGroup);
            msg = "";
            StateHasChanged();
        });
        hub.On("StartTheGame", () => {
            HandleStartGame();
        });
        hub.On("StartVote", () => {
            StartVote();
            StateHasChanged();
        });
        hub.On<VoteDTO>("VoteUpdated", vote => {
            var law = myGame.LawList.FirstOrDefault(l => l.LawID == vote.LawID);
            if (law != null) {
                switch (vote.VoteType) {
                    case "For":
                        law.For += vote.Points;
                        break;
                    case "Against":
                        law.Against += vote.Points;
                        break;
                    case "Avoid":
                        law.Avoid += vote.Points;
                        break;
                }
                StateHasChanged();
            }
        });

        hub.On("showPieChart", async () => {
            await ShowPieChart();
            StateHasChanged();
        });
        hub.On("ShowNextLaw", () => {
            GetNextLaw();
            StateHasChanged();
        });
        hub.On("StartAgain", async () => {
            StartAgain();
            StateHasChanged();
        });
        hub.On<Group>("GroupReconnected", reconnectedGroup => {
            Group userToUpdate = allGroups.Where(g => g.GroupID == reconnectedGroup.GroupID).FirstOrDefault();
            userToUpdate.ConnectionID = reconnectedGroup.ConnectionID;
            // get the necessaryData to send reconnected group.
            ReconnectingData data = new ReconnectingData {
                LawCounter = lawCounter,
                LawAmountPass = lawAmountPass,
                LawAmountNotPass = lawAmountNotPass
            };
            hub.SendAsync("SendLawCounter", data , reconnectedGroup.ConnectionID);// we send the lawcounter.
            StateHasChanged();
        });

        // close all games of this user.
        var gameStartResponse = await Http.GetAsync("api/Laws/CloseAllGames/" + UserID);
        if (gameStartResponse.IsSuccessStatusCode) {
            Console.WriteLine("All Games Are Closed");
        }
        else {
            // msg = gameStartResponse.Content.ReadAsStringAsync().Result;
            Console.WriteLine(gameStartResponse.Content.ReadAsStringAsync().Result);
        }

        Console.WriteLine("UserId: " + UserID);

    }

    // if the user looged in:
    public bool IsConnected =>
    hub?.State == HubConnectionState.Connected;

    // release connection.
    public async ValueTask DisposeAsync() {
        await BackToStart();
        if (hub != null) {
            await hub.DisposeAsync();
        }
    }


    // async Task ReConnect(string newConnectionId) {
    //     ConnectionID = newConnectionId;
    //     await hub.SendAsync("LecturerReconnected", ConnectionID);
    // }





    async Task GetGame()
    {

        // Delete all the groups in the game.
        var response = await Http.DeleteAsync("api/Laws/DeleteAllGroups");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("DeleteAllGroups");
        }
        else
        {
            // msg = response.Content.ReadAsStringAsync().Result; ;
            Console.WriteLine(response.Content.ReadAsStringAsync().Result);
        }
        // reset all the votes for the laws.
        var resetVotesResponse = await Http.GetAsync("api/Laws/ResetVotes/" + myGame.GameID);
        if (resetVotesResponse.IsSuccessStatusCode)
        {
            Console.WriteLine("ResetVotes");
        }
        else
        {
            // msg = resetVotesResponse.Content.ReadAsStringAsync().Result;
            Console.WriteLine(resetVotesResponse.Content.ReadAsStringAsync().Result);
        }

        bool gameStarted = true;
        var gameStartResponse = await Http.GetAsync("api/Laws/ChangeGameStarted/" + UserID + "/" + gameStarted);

        if (gameStartResponse.IsSuccessStatusCode)
        {
            // we can get the game.
            var response1 = await Http.GetAsync("api/Laws/Game/" + playerGameCode);
            if (response1.IsSuccessStatusCode == true)
            {
                // להוסיף פה את השינוי של תחילת המשחק
                myGame = response1.Content.ReadFromJsonAsync<Game>().Result;
                firsatCanvasDisplay = "none";
                containerDisplay = "flex";
                groupListDisplay = "flex";
                startGameBtnDisplay = "block";
                msg = "";

                Console.WriteLine(myGame.ScoreFormat);
                // Retrieve all groups after logging in
                await GetAllGroups();
            }
            else
            {
                Console.WriteLine("wrong");
                string error = response1.Content.ReadAsStringAsync().Result;
                switch (error)
                {
                    case "No Game Code":
                        msg = "קוד המשחק לא תקין";
                        Console.WriteLine("we do not have a game with this code.");
                        break;
                    case "No Laws":
                        msg = "קוד המשחק לא תקין";
                        Console.WriteLine("this game do not have any laws");
                        break;
                    case "Not Enough Laws":
                        msg = "המשחק לא זמין";
                        Console.WriteLine("אין מספיק חוקים במשחק");
                        break;
                    case "Didnt Publish Game":
                        msg = "המשחק לא זמין";
                        Console.WriteLine("המשחק לא פורסם");
                        break;

                }
            }

        }
        else
        {
            Console.WriteLine("wrong");
            string error = gameStartResponse.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "Did Not Update GameStarted":
                    msg = "המשחק לא עודכן";
                    Console.WriteLine("the game was not update .");
                    break;
            }

        }



    }







    // async Task GetGame() {

    //     // we can get the game.
    //     var response1 = await Http.GetAsync("api/Laws/Game/" + playerGameCode);
    //     if (response1.IsSuccessStatusCode == true) {
    //         // להוסיף פה את השינוי של תחילת המשחק
    //         myGame = response1.Content.ReadFromJsonAsync<Game>().Result;

    //         // Retrieve all groups after logging in
    //         await GetAllGroups();

    //         // // we check if we have groups and if we do we delete them.
    //         // if (allGroups != null && allGroups.Any()) {
    //         //     // Delete all the groups in the game.
    //         //     var response = await Http.DeleteAsync("api/Laws/DeleteAllGroups");
    //         //     if (response.IsSuccessStatusCode) {
    //         //         Console.WriteLine("DeleteAllGroups");
    //         //         allGroups.Clear();
    //         //     }
    //         //     else {
    //         //         // msg = response.Content.ReadAsStringAsync().Result; ;
    //         //         Console.WriteLine(response.Content.ReadAsStringAsync().Result);
    //         //     }

    //         // }

    //         bool resetLaws = false;
    //         // we checl if the laws are 0 and if not we reset them.
    //         foreach(LawsDTO law in myGame.LawList) {
    //             if(law.For > 0 || law.Against >0 || law.Avoid > 0) {
    //                 resetLaws = true;
    //                 law.For = 0;
    //                 law.Against = 0;
    //                 law.Avoid = 0;
    //             }
    //         }
    //         if(resetLaws == true) {
    //             // reset all the votes for the laws.
    //             var resetVotesResponse = await Http.GetAsync("api/Laws/ResetVotes/" + myGame.GameID);
    //             if (resetVotesResponse.IsSuccessStatusCode) {
    //                 Console.WriteLine("ResetVotes");
    //             }
    //             else {
    //                 string error = resetVotesResponse.Content.ReadAsStringAsync().Result;
    //                 Console.WriteLine(error);

    //             }

    //         }



    //         // we check if the game didnt start if he didnt we satr him.
    //         if(myGame.GameStarted == false) {
    //             bool gameStarted = true;
    //             var gameStartResponse = await Http.GetAsync("api/Laws/ChangeGameStarted/" + UserID + "/" + gameStarted);
    //             if (gameStartResponse.IsSuccessStatusCode) {
    //                 myGame.GameStarted = true;
    //             }
    //             else {
    //                 Console.WriteLine("wrong");
    //                 string error = gameStartResponse.Content.ReadAsStringAsync().Result;
    //                 switch (error) {
    //                     case "Did Not Update GameStarted":
    //                         msg = "המשחק לא עודכן";
    //                         Console.WriteLine("the game was not update .");
    //                         break;
    //                 }

    //             }

    //         }


    //         firsatCanvasDisplay = "none";
    //         containerDisplay = "flex";
    //         groupListDisplay = "flex";
    //         startGameBtnDisplay = "block";
    //         msg = "";



    //     }
    //     else {
    //         Console.WriteLine("wrong");
    //         string error = response1.Content.ReadAsStringAsync().Result;
    //         switch (error) {
    //             case "No Game Code":
    //                 msg = "קוד המשחק לא תקין";
    //                 Console.WriteLine("we do not have a game with this code.");
    //                 break;
    //             case "No Laws":
    //                 msg = "קוד המשחק לא תקין";
    //                 Console.WriteLine("this game do not have any laws");
    //                 break;
    //             case "Not Enough Laws":
    //                 msg = "המשחק לא זמין";
    //                 Console.WriteLine("אין מספיק חוקים במשחק");
    //                 break;
    //             case "Didnt Publish Game":
    //                 msg = "המשחק לא זמין";
    //                 Console.WriteLine("המשחק לא פורסם");
    //                 break;

    //         }
    //     }


    // }


    async Task StartGame() {
        if (hub != null) {
            await hub.SendAsync("StartGame");
        }
    }

    void HandleStartGame() {
        groupListDisplay = "none";
        startGameBtnDisplay = "none";
        explenationCanvasDisplay = "block";
        characterText = ""; // no text to character when explaining.
                            // Console.WriteLine("startgame");
        InvokeAsync(StateHasChanged);

    }





    async Task GetAllGroups() {
        var response = await Http.GetAsync("api/Laws/GetAllGroups/" + myGame.GameID);
        if (response.IsSuccessStatusCode) {
            allGroups = await response.Content.ReadFromJsonAsync<List<Group>>();
            StateHasChanged();
            msg = "";

        }
        else {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine(errorContent);
            msg = "";
        }

    }

    async Task DistributePoints() {
        int gameID = myGame.GameID;
        bool scoreFormat;
        if(myGame.ScoreFormat == true) {
            scoreFormat = true;
        }
        else {
            scoreFormat = false;
        }
        var response = await Http.GetAsync("api/Laws/DistributePoints/" + gameID + "/" + scoreFormat);
        if (response.IsSuccessStatusCode) {
            Console.WriteLine("Points distributed successfully");
            await GetAllGroups(); // Refresh the group list to show updated points
            explenationCanvasDisplay = "none";
            startVoteBtnDisplay = "block";
            groupListDisplay = "flex";
            characterText = "ברכותי! קיבלתם קולות, בואו נתחיל לשחק!";
            // gotVotesDisplay = "block";
        }
        else {
            Console.WriteLine("Failed to distribute points");
            msg = "Failed to distribute points.";
        }
    }

    async void StartTheVote() {
        Console.WriteLine("start the game!");
        await hub.SendAsync("StartVote");
    }

    void StartVote() {
        startVoteBtnDisplay = "none";
        groupListDisplay = "none";
        voteGameCanvasDisplay = "flex";
        pieChartBtnDisplay = "block";
        LawContentContainerDisplay = "flex";

        GetLawContent();
    }

    void GetLawContent() {
        if (lawCounter < myGame.LawList.Count) {
            currentLawContent = myGame.LawList[lawCounter].Content;
        }else {
            currentLawContent = "finish Game!";
        }
        characterText = "הצביעו עכשיו!";
    }

    private async Task TriggerPieChart() {
        await hub.SendAsync("ShowChart");
    }

    private bool CalculateResult() {
        if (myGame.LawList[lawCounter].For > 60) {
            lawAmountPass++;
            characterText = "ברכותי! החוק עבר!";
            return true;
        }
        else {
            lawAmountNotPass++;
            characterText = "החוק לא עבר ";
            return false;
        }
    }

    private async Task ShowPieChart() {
        LawContentContainerDisplay = "none";
        PieChartContainerDisplay = "block";
        pieChartBtnDisplay = "none";
        // characterText = "להלן התוצאות:";

        if (myGame.LawList.Count > 0 && lawCounter < myGame.LawList.Count) {
            var currentLaw = myGame.LawList[lawCounter];
            var data = new[] {
                new { label = "For", value = currentLaw.For },
                new { label = "Against", value = currentLaw.Against },
                new { label = "Avoid", value = currentLaw.Avoid }
            };
            myGame.LawList[lawCounter].IsPass = CalculateResult();// return true/false.
            Console.WriteLine(myGame.LawList[lawCounter].IsPass);
            var dataJson = System.Text.Json.JsonSerializer.Serialize(data);// make it json.
            await JSRuntime.InvokeVoidAsync("createOrUpdatePieChart", dataJson);
        }
    }


    private async Task callForNextLaw() {
        // דרך HUB לקרוא לכולם להציג את החוק הבא
        await hub.SendAsync("ShowTheNextLaw");
    }

    void GetNextLaw() {
        lawCounter++;
        // לבדוק האם נגמרו החוקים
        if (lawCounter >= myGame.LawList.Count) {
            FinishGame();
            return;
        }
        //להביא את החוק הבא
        GetLawContent();
        //להסתיר את הגרף ולהראות את הכפתורים
        LawContentContainerDisplay = "flex";
        PieChartContainerDisplay = "none";
        characterText = "הצביעו עכשיו!";
        pieChartBtnDisplay = "block";


    }

    void FinishGame() {
        Console.WriteLine("we finish vote");
        voteGameCanvasDisplay = "none";
        resultsContainerDisplay = "block";

        PieChartContainerDisplay = "none";
        characterText = " סיימנו להצביע";

        // foreach(LawsDTO law in myGame.LawList) {
        //     if(law.IsPass == true) {
        //         lawAmountPass++;
        //     }
        //     else {
        //         lawAmountNotPass++;
        //     }
        // }

    }


    async Task BackToStart() {
        var response = await Http.DeleteAsync("api/Laws/DeleteAllGroups");
        if (response.IsSuccessStatusCode) {
            var resetVotesResponse = await Http.GetAsync("api/Laws/ResetVotes/" + myGame.GameID);
            if (resetVotesResponse.IsSuccessStatusCode) {
                bool gameStarted = false;
                var gameStartResponse = await Http.GetAsync("api/Laws/ChangeGameStarted/" + playerGameCode + "/" + gameStarted);
                if (gameStartResponse.IsSuccessStatusCode) {
                    await hub.SendAsync("StartAgain");
                }
                else {
                    msg = gameStartResponse.Content.ReadAsStringAsync().Result;
                }
            }
            else {
                msg = resetVotesResponse.Content.ReadAsStringAsync().Result;
            }
        }
        else {
            msg = response.Content.ReadAsStringAsync().Result; ;
            Console.WriteLine(msg);
        }
    }

    async Task StartAgain() {
        firsatCanvasDisplay = "flex";
        resultsContainerDisplay = "none";
        msg = "";

        allGroups = new List<Group>(); // reset the groups list.
        playerGameCode = 0;
        myGame = new Game();
        lawAmountNotPass = 0;
        lawAmountPass = 0;
        lawCounter = 0;
        characterText = "ברוכים הבאים למליאה";

    }


    void NavigateTo() {
        int usrID = 1;
        nav.NavigateTo("./MyGames/" + usrID);
    }




    /*
     * ניסיון חשיבה למקרה ומישהו יצא מהדפדפן:
     * 
     * שלב 0 - כניסת שחקנים
     * שלב 1 - שלב הסבר המשחק
     * שלב 2 - שלב חלוקת ניקוד
     * שלב 3 - מסך כניסת השחקנים, הפעם עם ניקוקד
     * שלב - 4 תחילת המשחק והצגת חוק ראשון
     * לשים משתנים של איזה חוק אנחנו ומה הניקוד(כמות חוקים שעברו או לא))
     * 
     */





}
