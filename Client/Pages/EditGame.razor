@page "/EditGame/{GameCode:int}/{UserID:int}"
@inject HttpClient Http;
@inject NavigationManager nav;
@using NewBlazorProjecct.Shared.DTOs


@if(msg != "") {
    <h1>@msg</h1>
}

<h3>GameID: @GameCode</h3>

@if(myGame != null) {
    <table>
        <tr>
            <th> הצעה </th>
            <th> עריכה </th>
            <th> מחיקה </th>
        </tr>
        @if (myGame.LawList == null) {
            <span> אין חוקים במאגר </span>
        }
        else {
            foreach(LawsDTO law in myGame.LawList) {
                <tr>
                    <td> @law.Content </td>
                    <td> <button @onclick="(()=> SendLawToUpdate(law) )"> עריכה </button> </td>
                    <td> <button> מחיקה </button> </td>
                </tr>
            }
        }
    </table>
    

    @if(singleLaw == null) {
        <div> עלייכם להוסיף הצעת חוק חדשה </div>
        <button class="btn-primary" @onclick="AddLaw"> הצעת חוק+ </button>
    }
    else {
        <h3>הצעת חוק:</h3>
        <input type="text" @bind="singleLaw.Content" />
        <button @onclick="CheckLawSaving" class="btn-primary"> שמירת חוק </button>
    }







}

@code {

    [Parameter]
    public int UserID { get; set; }

    [Parameter]
    public int GameCode { get; set; }

    string msg = "";
    Game myGame; // contain the whole game.
    LawsDTO singleLaw;// will contain a single law so we can update him.

    bool editState = false; // Add or Update law, true is for Update and false is for Add.

    protected override async Task OnInitializedAsync() {
        var response = await Http.GetAsync("api/Generator/" + UserID + "/GetOneGame/" + GameCode);
        if (response.IsSuccessStatusCode == true) {

            myGame = response.Content.ReadFromJsonAsync<Game>().Result;
            foreach(LawsDTO law in myGame.LawList) {
                Console.WriteLine(law.Content);
            }
        }
        else {
            Console.WriteLine("wrong");
            string error = response.Content.ReadAsStringAsync().Result;
            switch (error) {
                case "No Game Code":
                    msg = "we do not have a game with this code.";
                    break;
                case "No Laws":
                    msg = "this game do not have any laws";
                    break;
            }
        }

    }


    // Create a new LawsDTO for adding a new Law. 
    public void AddLaw() {
        singleLaw = new LawsDTO();
    }
    // Take the law we want to edit to singleLaw.
    void SendLawToUpdate(LawsDTO lawToUpdate) {
        singleLaw = lawToUpdate;
        editState = true;
    }
    // When we click on save law we check if we edit or adding law and calling the right function.
    async void CheckLawSaving() {
        if (editState) {
            Console.WriteLine("edit");
            await UpdateLaw();
        }
        else {
            Console.WriteLine("add");
            await AddNewLaw();
        }
    }
    // Func to add a new law.
    async Task AddNewLaw() {
        var response = await Http.GetAsync("api/Generator/" + UserID + "/AddNewLaw/" + myGame.GameID + "/" + singleLaw.Content);
        if (response.IsSuccessStatusCode) {
            LawsDTO newLaw =  response.Content.ReadFromJsonAsync<LawsDTO>().Result;
            myGame.LawList.Add(newLaw);
            singleLaw = null;
        }
        else {
            Console.WriteLine("wrong");
            string error = response.Content.ReadAsStringAsync().Result;
            switch (error) {
                case "Not Save Law":
                    msg = "We did not save the law";
                    break;
                case "Not Get Law":
                    msg = "We did not Get the law";
                    break;
            }
        }

    }
    // Func to update the law we want.
    async Task UpdateLaw() {
        var response = await Http.PostAsJsonAsync("api/Generator/" + UserID + "/UpdateLaw", singleLaw);
        if (response.IsSuccessStatusCode) {
            LawsDTO newLaw = response.Content.ReadFromJsonAsync<LawsDTO>().Result;
            int index = myGame.LawList.IndexOf(singleLaw);
            myGame.LawList[index] = newLaw;
            editState = false;
            singleLaw = null;

        }
        else {
            Console.WriteLine("wrong");
            string error = response.Content.ReadAsStringAsync().Result;
            switch (error) {
                case "Didnt Update":
                    msg = "We did not Update the law";
                    break;
                case "Didnt Get Law":
                    msg = "We did not Get the law";
                    break;
            }
        }

    }





}
