@using System.Net.Http.Json
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@using NewBlazorProjecct.Shared.DTOs
@inject NewBlazorProjecct.Shared.Services.UserService UserService

@if (isVisible) {
    <div class="overlay">

        <div class="modal-content">
            <span class="close" @onclick="Hide">&times;</span>
            <h2 class="underline-title">@((isRegisterMode ? "הרשמה" : "התחברות"))</h2>

            <EditForm Model="loginModel" OnValidSubmit="@(isRegisterMode ? HandleRegister : HandleLogin)" style="display: flex; flex-direction: column; align-items: center;">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label>שם משתמש:</label>
                    <InputText class="defaultINPUT" @bind-Value="loginModel.Name" />
                </div>
                <div class="form-group">
                    <label>סיסמה:</label>
                    <InputNumber class="defaultINPUT" @bind-Value="loginModel.Password" type="password" />
                </div>
                <button type="submit" class="defaultBTN">@((isRegisterMode ? "הרשמה" : "התחברות"))</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage)) {
                <p style="color:red;">@errorMessage</p>
            }

            <!-- Button to toggle between registration and login -->
            <button class="toggle-button" @onclick="ToggleMode">
                @if (isRegisterMode) {
                    <span>התחברות במקום?</span>
                }
                else {
                    <span>אין לך חשבון? הירשם עכשיו</span>
                }
            </button>
        </div>
    </div>




}




@code {
    private Login loginModel = new Login();
    private bool isVisible = false;
    private string errorMessage = string.Empty;
    private bool isRegisterMode = false; // false = login, true = registration

    [Parameter]
    public EventCallback OnLoginSuccess { get; set; }



    private async Task HandleLogin() {
        errorMessage = string.Empty;
        var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

        if (response.IsSuccessStatusCode) {
            // Get the User from the response
            var user = await response.Content.ReadFromJsonAsync<User>();
            UserService.Login(user); // Update the UserService with logged in user
            await OnLoginSuccess.InvokeAsync();
            isVisible = false;

            // Navigate to MyGames with UserID
            Navigation.NavigateTo($"./MyGames/{user.UserID}");
        }
        else {
            var errorResponse = await response.Content.ReadAsStringAsync();
            errorMessage = string.IsNullOrEmpty(errorResponse) ? "Invalid username or password" : errorResponse;
        }
    }



    private async Task HandleRegister() {
        errorMessage = string.Empty;

        // Call register controller
        var checkResponse = await Http.PostAsJsonAsync("api/auth/checkUserExists", loginModel);
        if (!checkResponse.IsSuccessStatusCode) {
            var errorMessage = await checkResponse.Content.ReadAsStringAsync();
            Console.WriteLine(errorMessage);

            // errorMessage = "User already exists";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/auth/register", loginModel);
        if (response.IsSuccessStatusCode) {

            await HandleLogin();
        }
        else {
            var errorResponse = await response.Content.ReadAsStringAsync();
            errorMessage = string.IsNullOrEmpty(errorResponse) ? "Error creating user" : errorResponse;
            Console.WriteLine(errorMessage);
        }
    }

    // private void ToggleMode() {
    //     isRegisterMode = !isRegisterMode;
    // }


    private void ToggleMode() {
        isRegisterMode = !isRegisterMode;  // Switch between register and login modes
        errorMessage = string.Empty;  // Clear any error messages
    }



    public void Show() {
        isVisible = true;
        StateHasChanged();
    }

    public void Hide() {
        isVisible = false;
        errorMessage = string.Empty;
        StateHasChanged();
        loginModel.Name = string.Empty;
        loginModel.Password = 0;
    }




    public void ClearLoginFields() {
        loginModel.Name = string.Empty;
        loginModel.Password = 0;
        errorMessage = string.Empty;
        StateHasChanged();
    }


}

