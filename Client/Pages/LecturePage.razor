@page "/LecturePage/{UserID:int}"
@inject HttpClient Http;
@inject NavigationManager nav;
@using Microsoft.AspNetCore.SignalR.Client;
@implements IAsyncDisposable;
@using NewBlazorProjecct.Shared.DTOs;
@inject IJSRuntime JS
@using NewBlazorProjecct.Client.Components
@using Blazorise.QRCode


<div id="FristCanvas" style="display:@firstCanvasDisplay">

    
    <h1>נא להקליד קוד משחק</h1>
    <input class="defaultINPUT" type="number" @bind="playerGameCode" />
    <span>לדוגמה: 101</span>
    <button class="defaultBTN" @onclick="HandleGetGame"> כניסה למשחק</button>
    <img class="images" src="./imgs/updatedballotbox.png" />


    <div class="qr-code-container">

        <QRCode Value="https://projects.telem-hit.net/2024/DemocracyGame_SeanYovel/UserPage" size="ExtraSmall" ></QRCode>

    </div>


</div>



<div class="container" style="display:@containerDisplay;">

    <GroupListCompo Groups="allGroups" VoteCount="@votedGroupCount"> </GroupListCompo>

    <div class="row Main-Row">

        <div class="left-column col-4">

            <div class="left-top">

                <div class="speech-bubble-container" style="display:@speechBubbleDisplay">
                    <p class="character-text"> @characterText </p>
                </div>

                <div class="characterWrapper">
                    <img src=@myCharaterSrc alt="myCharacter" class="characterImg" />
                </div>

@*                 <div class="Black-Box">

                    <table class="score-table" style="display:@scoreTableDisplay">

                        <thead>
                            <tr>
                                <th class="green-title">  עברו </th>
                                <th class="red-title">  נפלו </th>
                            </tr>
                        </thead>

                        <tbody>
                            <tr>
                                <td> @lawAmountPass  </td>
                                <td> @lawAmountNotPass  </td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td colspan="2"> @amountOfLaws / @lawCounterInTable  </td>
                            </tr>
                        </tfoot>

                    </table>


                </div> *@


                <div class="Black-Box">

                    <div class="icon-container" style="display:@scoreTableDisplay">
                        <div class="icon-item">
                            <span class="icon-circle green-circle">
                                <i class="fa fa-check"></i> <!-- Green "V" icon -->
                            </span>
                            <span class="counter">@lawAmountPass</span>
                        </div>
                        <div class="icon-item">
                            <span class="icon-circle red-circle">
                                <i class="fa fa-times"></i> <!-- Red "X" icon -->
                            </span>
                            <span class="counter">@lawAmountNotPass</span>
                        </div>
                    </div>


                </div>


            </div>


            <div class="left-bottom">


                @if (allGroups.Count > 0) {
                    <button class="defaultBTN" style="display:@distributePointsBtnDisplay" @onclick="DistributePoints">חלוקת קולות</button>
                    <button class="defaultBTN" style="display:@startVoteBtnDisplay" @onclick="StartTheVote">נתחיל</button>
                    <button class="defaultBTN" style="display:@pieChartBtnDisplay" @onclick="TriggerPieChart"> תוצאות! </button>
                    <button class="defaultBTN" style="display:@PieChartContainerDisplay" @onclick="callForNextLaw" id="nextLawButton"> בואו נמשיך </button>
                    <button class="defaultBTN" style="display:@resultsContainerDisplayBtn" @onclick="BackToStart" id="gameFinished"> חזרה להתחלה </button>
                }
                else {
                    <button class="defaultBTN" disabled>אין קבוצות פעילות</button>
                }


            </div>

        </div>


        <div class="right-column col-8">



            <ul style="display:@groupListDisplay">
                @foreach (Group group in allGroups) {
                    <li>
                        <div class="header">
                            <p> @group.GroupName </p>

                        </div>

                        <div class="body">
                            <img class="smallImg" src="@group.PassportCharacter" />
                        </div>

                        <div class="footer">
                            <p> קולות:  @group.Points.ToString() </p>
                        </div>

                    </li>
                }
            </ul>



            <div id="voteGameCanvas" style="display:@voteGameCanvasDisplay">


                <div id="LawContentContainer" style="display:@LawContentContainerDisplay">

                    <div class="row half head">
                        <div id="lawWrapper">
                            <h1> @currentLawTitle  </h1>
                            <p id="law">@currentLawContent</p>
                        </div>
                    </div>

                    <div class="row half bottom">
                        <div id="cardsContainer">
                            <button id="Against"> נגד </button>
                            <button id="Avoid"> נמנע </button>
                            <button id="For"> בעד </button>
                        </div>
                    </div>

                </div>

                <div id="PieChartContainer" style="display:@PieChartContainerDisplay">
                    <div id="canvasContainer"> <canvas id="myPieChart"></canvas> </div>
                </div>






            </div>




            <!--  RESULTS SCREEN  -->
            <div id="resultsContainer" style="display:@resultsContainerDisplay">

                <div class="end-table-wrapper">

                    <table class="score-table end-table">

                        <thead>
                            <tr>
                                <th class="green-title end-table-th">  עברו </th>
                                <th class="red-title end-table-th">  נפלו </th>
                            </tr>
                        </thead>

                        <tbody>
                            <tr>
                                <td class="end-table-td"> @lawAmountPass  </td>
                                <td class="end-table-td"> @lawAmountNotPass  </td>
                            </tr>
                        </tbody>

                    </table>

                </div>




            </div>



        </div>

    </div>





</div>




@code {
    [Parameter]
    public int UserID { get; set; }
    private HubConnection? hub;// the connection to the Hub.
    string ConnectionID;

    bool logged = false;
    int playerGameCode = 0;// the code from the input of the player.
    List<Group> allGroups = new List<Group>();// list for all the users.
    Game myGame = new Game(); // containe the game withe the laws.
    string msg;// handle the error msg.



    // display divs.
    string firstCanvasDisplay = "flex";
    string containerDisplay = "none";
    // string explenationCanvasDisplay = "none";
    string voteGameCanvasDisplay = "none";
    string groupListDisplay = "none";
    string LawContentContainerDisplay = "flex";
    string PieChartContainerDisplay = "none";
    string resultsContainerDisplay = "none";
    string scoreTableDisplay = "none";

    // display buttons
    string distributePointsBtnDisplay = "none";
    string startVoteBtnDisplay = "none";
    string pieChartBtnDisplay = "none";
    string speechBubbleDisplay = "flex";
    string scoreTableContainer = "none";
    string resultsContainerDisplayBtn = "none";


    string currentLawTitle = "the Law Title will be here";
    string currentLawContent = "the law content will be here";
    int lawCounter = 0; // Track which law we are.
    int lawCounterInTable = 0;
    int amountOfLaws = 0;
    int lawAmountPass = 0;
    int lawAmountNotPass = 0;
    string characterText = "ברוכה הבאה ";

    private int votedGroupsCount = 0; // Tracks how many groups have voted
    private int totalGroupsCount = 0; // The total number of groups

    string myCharaterSrc = "./imgs/Female.png";

    // private string showScoresBtnDisplay = "none";

    private int votedGroupCount = 0;  // Track number of groups that have voted



    protected override async Task OnInitializedAsync() {
        // make a connection.
        hub = new HubConnectionBuilder()
            .WithUrl(nav.ToAbsoluteUri("./chathub"))
            .WithAutomaticReconnect()
            .Build();

        await hub.StartAsync(); // start connection.
        if (hub != null) {
            ConnectionID = hub.ConnectionId;
            // hub.Reconnected += (newConnectionId) => ReConnect(newConnectionId);
        }

        hub.On<string>("LecturJoin", (lecturemsg) => {
            Console.WriteLine(lecturemsg);
        });

        hub.On<string, Group>("JoinGroup", async (GroupName, newGroup) => {
            await GetAllGroups();
            Console.WriteLine($"group Name: {GroupName}");
            msg = "";
            StateHasChanged();
        });

        hub.On("StartVote", () => {
            StartVote();
            StateHasChanged();
        });

        hub.On<VoteDTO>("VoteUpdated", vote => {
            var law = myGame.LawList.FirstOrDefault(l => l.LawID == vote.LawID);
            if (law != null) {
                switch (vote.VoteType) {
                    case "For":
                        law.For += vote.Points;
                        break;
                    case "Against":
                        law.Against += vote.Points;
                        break;
                    case "Avoid":
                        law.Avoid += vote.Points;
                        break;
                }
                Console.WriteLine($"FOR: {myGame.LawList[lawCounter].For}, AGAINST:  {myGame.LawList[lawCounter].Against}, AVOID: {myGame.LawList[lawCounter].Avoid}");
                votedGroupsCount++;
                votedGroupCount++;

                StateHasChanged();
            }
        });

        hub.On("showPieChart", async () => {
            await ShowPieChart();
            StateHasChanged();
        });

        hub.On("ShowNextLaw", () => {
            GetNextLaw();
            StateHasChanged();
        });

        hub.On("StartAgain", async () => {
            StartAgain();
            StateHasChanged();
        });
        hub.On<Group>("GroupReconnected", reconnectedGroup => {
            Group userToUpdate = allGroups.Where(g => g.GroupID == reconnectedGroup.GroupID).FirstOrDefault();
            userToUpdate.ConnectionID = reconnectedGroup.ConnectionID;
            // get the necessaryData to send reconnected group.
            ReconnectingData data = new ReconnectingData {
                    LawCounter = lawCounter,
                    LawAmountPass = lawAmountPass,
                    LawAmountNotPass = lawAmountNotPass
                };
            hub.SendAsync("SendLawCounter", data, reconnectedGroup.ConnectionID);// we send the lawcounter.
            StateHasChanged();
        });

        // close all games of this user.
        var gameStartResponse = await Http.GetAsync("api/Laws/CloseAllGames/" + UserID);
        if (gameStartResponse.IsSuccessStatusCode) {
            Console.WriteLine("All Games Are Closed");
        }
        else {
            // msg = gameStartResponse.Content.ReadAsStringAsync().Result;
            Console.WriteLine(gameStartResponse.Content.ReadAsStringAsync().Result);
        }

        Console.WriteLine("UserId: " + UserID);

    }

    // if the user looged in:
    public bool IsConnected =>
    hub?.State == HubConnectionState.Connected;

    // release connection.
    public async ValueTask DisposeAsync() {
        await BackToStart();
        if (hub != null) {
            await hub.DisposeAsync();
        }
    }

    async Task HandleGetGame() {
        try {
            // Get the Game.
            await GetGame();
            if (myGame == null) return;
            // Check groups to delete.
            if (!await DeleteAllGroups()) return;
            // Reset votes.
            if (!await ResetVotes()) return;
            // Change game start.
            if (!await ChangeGameStart(true)) return;

            await hub.SendAsync("JoinLecturer", ConnectionID, myGame.GameID.ToString());

            firstCanvasDisplay = "none";
            containerDisplay = "flex";
            groupListDisplay = "flex";
            distributePointsBtnDisplay = "block";
            // startGameBtnDisplay = "block";
            msg = "";
            characterText = $"בואו לשחק! קוד המשחק: {myGame.GameCode}";
            await GetAllGroups(); // Retrieve all groups after logging in

        }
        catch (Exception ex) {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    async Task GetGame() {
        var gameResponse = await Http.GetAsync($"api/Laws/Game/{playerGameCode}");
        if (!gameResponse.IsSuccessStatusCode) {
            await HandleGameError(gameResponse);
            return;
        }
        Console.WriteLine("we got the game!");
        myGame = await gameResponse.Content.ReadFromJsonAsync<Game>();
        amountOfLaws = myGame.LawList.Count;
        Console.WriteLine($"FOR: {myGame.LawList[0].For}, AGAINST:  {myGame.LawList[0].Against}, AVOID: {myGame.LawList[0].Avoid}");

    }

    async Task<bool> DeleteAllGroups() {
        var deleteResponse = await Http.DeleteAsync($"api/Laws/DeleteAllGroups/{myGame.GameID}");
        if (!deleteResponse.IsSuccessStatusCode) {
            var errorMessage = await deleteResponse.Content.ReadAsStringAsync();
            if (errorMessage != "No Groups" && errorMessage != "Failed to retrieve groups") {
                await HandleGameError(deleteResponse);
                return false;
            }
            Console.WriteLine(errorMessage);
        }
        else {
            Console.WriteLine($"Deleted all groups in gameID: {myGame.GameID}");
        }
        return true;
    }

    async Task<bool> ResetVotes() {
        var resetVotesResponse = await Http.GetAsync($"api/Laws/ResetVotes/{myGame.GameID}");
        if (!resetVotesResponse.IsSuccessStatusCode) {
            // await HandleGameError(resetVotesResponse);
            var error = await resetVotesResponse.Content.ReadAsStringAsync();
            Console.WriteLine(error);
            return false;
        }
        Console.WriteLine("we reset all the votes to 0");
        return true;
    }

    async Task<bool> ChangeGameStart(bool gameStarted) {
        var gameStartResponse = await Http.GetAsync($"api/Laws/ChangeGameStarted/{myGame.GameID}/{gameStarted}");
        if (!gameStartResponse.IsSuccessStatusCode) {
            await HandleGameError(gameStartResponse);
            return false;
        }
        return true;
    }

    async Task GetAllGroups() {
        var response = await Http.GetAsync("api/Laws/GetAllGroups/" + myGame.GameID);
        if (response.IsSuccessStatusCode) {
            allGroups = await response.Content.ReadFromJsonAsync<List<Group>>();
            StateHasChanged();
            msg = "";

        }
        else {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine(errorContent);
            msg = "";
        }

    }


    private async Task HandleGameError(HttpResponseMessage response) {
        var error = await response.Content.ReadAsStringAsync();
        switch (error) {
            case "No Game Code":
                msg = "קוד המשחק לא תקין";
                Console.WriteLine("we do not have a game with this code.");
                break;
            case "No Laws":
                msg = "קוד המשחק לא תקין";
                Console.WriteLine("this game do not have any laws");
                break;
            case "Not Enough Laws":
                msg = "המשחק לא זמין";
                Console.WriteLine("אין מספיק חוקים במשחק");
                break;
            case "Didnt Publish Game":
                msg = "המשחק לא פורסם";
                Console.WriteLine("המשחק לא פורסם");
                break;
            case "Failed to retrieve groups":
                msg = "לא מצאנו קבוצות";
                break;
            case "Didn't delete groups!":
                msg = "לא מחקנו את הקבוצות";
                break;
            case "Did Not Update GameStarted":
                msg = "לא עדכנו את התחלת המשחק";
                break;
            default:
                msg = "שגיאה בלתי צפויה";
                break;
        }
        Console.WriteLine(msg);
        await JS.InvokeVoidAsync("alert", msg);
        return;
    }




    async Task DistributePoints() {
        int gameID = myGame.GameID;
        bool scoreFormat = myGame.ScoreFormat;

        var response = await Http.GetAsync("api/Laws/DistributePoints/" + gameID + "/" + scoreFormat);
        if (response.IsSuccessStatusCode) {
            Console.WriteLine("Points distributed successfully");
            await GetAllGroups(); // Refresh the group list to show updated points

            // explenationCanvasDisplay = "none";
            startVoteBtnDisplay = "block";
            groupListDisplay = "flex";
            characterText = "ברכותי! קיבלתם קולות, בואו נתחיל לשחק!";
            speechBubbleDisplay = "flex";
            distributePointsBtnDisplay = "none";

            // Show the button to display scores
            // showScoresBtnDisplay = "block";

            StateHasChanged(); // Trigger UI update
        }
        else {
            Console.WriteLine("Failed to distribute points");
            msg = "Failed to distribute points.";
            await JS.InvokeVoidAsync("alert", msg);
        }
    }




    async void StartTheVote() {
        Console.WriteLine("start the game!");
        await hub.SendAsync("StartVote", myGame.GameID.ToString());
    }

    void StartVote() {
        startVoteBtnDisplay = "none"; // hide the btn.
        groupListDisplay = "none"; // hide the groups.
        voteGameCanvasDisplay = "flex"; // show the game.
        pieChartBtnDisplay = "block"; // show the next btn.
        LawContentContainerDisplay = "flex"; // show the law.
        scoreTableDisplay = "flex"; // show the score table
        GetLawContent();
    }

    void GetLawContent() {
        if (lawCounter < myGame.LawList.Count) {
            currentLawTitle = myGame.LawList[lawCounter].Title;
            currentLawContent = myGame.LawList[lawCounter].Content;
            lawCounterInTable++;
        }
        else {
            currentLawTitle = "finish Game!";
            currentLawContent = "";
        }
        characterText = "הצביעו עכשיו!";
    }

    private async Task TriggerPieChart() {
        await hub.SendAsync("ShowChart", myGame.GameID.ToString());
    }

    private bool CalculateResult() {
        if (myGame.LawList[lawCounter].For > 60) {
            lawAmountPass++;
            characterText = "ברכותי, החוק עבר!";
            return true;
        }
        else {
            lawAmountNotPass++;
            characterText = "החוק לא עבר ";
            return false;
        }
    }

    private async Task ShowPieChart() {
        LawContentContainerDisplay = "none";
        PieChartContainerDisplay = "block";
        pieChartBtnDisplay = "none";
        // characterText = "להלן התוצאות:";

        if (myGame.LawList.Count > 0 && lawCounter < myGame.LawList.Count) {
            var currentLaw = myGame.LawList[lawCounter];
            var data = new[] {
                new { label = "בעד", value = currentLaw.For },
                new { label = "נגד", value = currentLaw.Against },
                new { label = "נמנע", value = currentLaw.Avoid }
            };
            myGame.LawList[lawCounter].IsPass = CalculateResult();// return true/false.
            Console.WriteLine(myGame.LawList[lawCounter].IsPass);
            var dataJson = System.Text.Json.JsonSerializer.Serialize(data);// make it json.
            await JSRuntime.InvokeVoidAsync("createOrUpdatePieChart", dataJson);
        }
    }


    private async Task callForNextLaw() {
        // דרך HUB לקרוא לכולם להציג את החוק הבא
        await hub.SendAsync("ShowTheNextLaw", myGame.GameID.ToString());

    }

    void GetNextLaw() {
        lawCounter++;
        votedGroupCount = 0;
        // לבדוק האם נגמרו החוקים
        if (lawCounter >= myGame.LawList.Count) {
            FinishGame();
            return;
        }
        //להביא את החוק הבא
        GetLawContent();
        //להסתיר את הגרף ולהראות את הכפתורים
        LawContentContainerDisplay = "flex";
        PieChartContainerDisplay = "none";
        characterText = "הצביעו עכשיו!";
        pieChartBtnDisplay = "block";
        votedGroupsCount = 0;

    }

    void FinishGame() {
        Console.WriteLine("we finish vote");
        voteGameCanvasDisplay = "none";
        resultsContainerDisplay = "flex";
        resultsContainerDisplayBtn = "block";
        scoreTableContainer = "none";
        PieChartContainerDisplay = "none";
        characterText = " סיימנו להצביע";
        scoreTableDisplay = "none"; // hide the score table

    }




    private async Task BackToStart() {
        try {
            // Check groups to delete.
            if (!await DeleteAllGroups()) return;
            // Reset votes.
            if (!await ResetVotes()) return;
            // Change game start.
            if (!await ChangeGameStart(false)) return;
            await hub.SendAsync("StartAgain", myGame.GameID.ToString());

        }
        catch (Exception ex) {
            Console.WriteLine($"Error: {ex.Message}");
        }

    }


    async Task StartAgain() {
        playerGameCode = 0;
        allGroups = new List<Group>(); // reset the groups list.
        myGame = new Game();
        msg = "";
        ResetDisplayVars();
        votedGroupCount = 0;

        currentLawTitle = "";
        currentLawContent = "";
        lawCounter = 0;
        lawCounterInTable = 0;
        amountOfLaws = 0;
        lawAmountPass = 0;
        lawAmountNotPass = 0;
        characterText = "ברוכים הבאים למליאה";
        votedGroupsCount = 0;
        totalGroupsCount = 0;
    }

    void ResetDisplayVars() {
        //divs
        firstCanvasDisplay = "flex";
        containerDisplay = "none";
        voteGameCanvasDisplay = "none";
        groupListDisplay = "none";
        LawContentContainerDisplay = "flex";
        PieChartContainerDisplay = "none";
        resultsContainerDisplay = "none";
        scoreTableDisplay = "none";
        //buttons
        distributePointsBtnDisplay = "none";
        startVoteBtnDisplay = "none";
        pieChartBtnDisplay = "none";
        speechBubbleDisplay = "flex";
        scoreTableContainer = "table";
        resultsContainerDisplayBtn = "none";

    }

    void NavigateTo() {
        int usrID = 1;
        nav.NavigateTo("./MyGames/" + usrID);
    }






}
