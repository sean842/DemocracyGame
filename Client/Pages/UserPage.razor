@page "/UserPage"
@inject HttpClient Http;
@inject NavigationManager nav;

@using Microsoft.AspNetCore.SignalR.Client;
@implements IAsyncDisposable;
@using NewBlazorProjecct.Shared.DTOs;
@inject IJSRuntime JS


<div id="FristCanvas" style="display:@firstCanvasDisplay">

    <h1>נא להקליד קוד משחק</h1>
    <input class="defaultINPUT" type="number" @bind="playerGameCode" />
    <span>לדוגמה: 101</span>
    <button class="defaultBTN" @onclick="GetGame"> כניסה למשחק</button>
    <img class="images" src="./imgs/updatedballotbox.png" />


</div>





<div id="chooseCharacter" class="canvas" style="display:@chooseCharacterDisplay">
    @if (!logged) {
        <div class="character-selection">
            <div class="col-4 character-col">

                <div class="imgWrapper @(selectedCharacter == "male" ? "selected" : "")" @onclick='() => SetCharacter("male")'>
                    <img src="./imgs/bigmale.png" class="character-img-btn" />
                </div>

            </div>

            <div class="col-4 input-col">
                <h2 class="title">בחרו שם ונציג לקבוצה</h2>
                <label style="text-align: center; display: flex; flex-direction: column; align-items: center;">
                    <input @bind="myGroup.GroupName" placeholder="הקלידו שם" class="defaultINPUT" />
                </label>
                <button class=" defaultBTN" style="margin:0;" @onclick="LogIn">המשיכו</button>

            </div>

            <div class="col-4 character-col">
                <div class="imgWrapper myShadow @(selectedCharacter == "female" ? "selected" : "")" @onclick='() => SetCharacter("female")'>
                    <img src="./imgs/bigfemale.png" class="character-img-btn" />
                </div>

            </div>

        </div>




    }
</div>






<div class="container" style="display:@containerDisplay;">

    <GroupListCompo Groups="allGroups"> </GroupListCompo>


    <div class="row Main-Row">

        <div class="left-column col-4">

            <div class="left-only ">

                <div class="speech-bubble-container" style="display:@speechBubbleDisplay">
                    <p class="character-text"> @characterText </p>
                </div>

                <div class="characterWrapper">
                    <img src=@myGroup.Character alt="myCharacter" class="characterImg" />
                </div>

                <div class="Black-Box">



                    <table class="score-table" style="display:@scoreTableDisplay">

                        <thead>
                            <tr>
                                <th class="green-title">  עברו </th>
                                <th class="red-title">  נפלו </th>
                            </tr>
                        </thead>

                        <tbody>
                            <tr>
                                <td> @lawAmountPass  </td>
                                <td> @lawAmountNotPass  </td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td colspan="2"> @amountOfLaws / @lawCounterInTable  </td>
                            </tr>
                        </tfoot>

                    </table>



                </div>


            </div>


        </div>


        <div class="right-column col-8">



            <ul style="display:@groupListDisplay">
                @foreach (Group group in allGroups) {
                    string myGroupClass = group.GroupID == myGroup.GroupID ? "my-group" : "";
                    Console.WriteLine($" groupID: {group.GroupID.ToString()}");

                    <li>
                        <div class="header">
                            <p> @group.GroupName </p>

                        </div>

                        <div class="body">
                            <img class="smallImg" src="@group.PassportCharacter" />
                        </div>

                        <div class="footer">
                            <p> קולות:  @group.Points.ToString() </p>
                        </div>

                    </li>
                }
            </ul>




            <div id="voteGameCanvas" style="display:@voteGameCanvasDisplay">


                <div id="LawContentContainer" style="display:@LawContentContainerDisplay">

                    <div class="row half head">
                        <div id="lawWrapper">
                            <h3> @currentLawTitle  </h3>
                            <p id="law">@currentLawContent</p>
                        </div>
                    </div>


                    <div class="row half bottom">
                        <div id="cardsContainer">
                            <button id="Against" @onclick='( () => ShowPopup("Against") )' disabled="@DisableVoteButton"> נגד </button>
                            <button id="Avoid" @onclick='( () => ShowPopup("Avoid") )' disabled="@DisableVoteButton"> נמנע </button>
                            <button id="For" @onclick='( () => ShowPopup("For") )' disabled="@DisableVoteButton"> בעד </button>
                        </div>
                    </div>
                    @if (isPopupVisible) {
                        <PopUp Message="@popupMessage" OnConfirm="OnPopupConfirm" />
                    }


                </div>

                <div id="PieChartContainer" style="display:@PieChartContainerDisplay">
                    <div id="canvasContainer"> <canvas id="myPieChart"></canvas> </div>
                </div>






            </div>

            <!--  RESULTS SCREEN  -->
            <div id="resultsContainer" style="display:@resultsContainerDisplay">

                <div class="end-table-wrapper">

                    <table class="score-table end-table">

                        <thead>
                            <tr>
                                <th class="green-title end-table-th">  עברו </th>
                                <th class="red-title end-table-th">  נפלו </th>
                            </tr>
                        </thead>

                        <tbody>
                            <tr>
                                <td class="end-table-td"> @lawAmountPass  </td>
                                <td class="end-table-td"> @lawAmountNotPass  </td>
                            </tr>
                        </tbody>

                    </table>

                </div>

            </div>



        </div>

    </div>



</div>



@code {

    private HubConnection? hub;// the connection to the Hub.

    bool logged = false;
    int playerGameCode = 0;// the code from the input of the player.
    List<Group> allGroups = new List<Group>();// list for all the users.
    Group myGroup = new Group(); // My user, will save the id.
    Game myGame = new Game(); // containe the game withe the laws.
    string msg;// handle the error msg.

    // display divs.
    string firstCanvasDisplay = "flex";
    string containerDisplay = "none";
    string explenationCanvasDisplay = "none";
    string voteGameCanvasDisplay = "none";
    string groupListDisplay = "none";
    string LawContentContainerDisplay = "flex";
    string PieChartContainerDisplay = "none";
    string resultsContainerDisplay = "none";
    string chooseCharacterDisplay = "none";
    string scoreTableDisplay = "none";


    // display buttons
    string startGameBtnDisplay = "none";
    string startVoteBtnDisplay = "none";
    string pieChartBtnDisplay = "none";
    string speechBubbleDisplay = "flex";
    string scoreTableContainer = "table";



    string currentLawTitle = "";
    string currentLawContent = "the law content will be here";
    int lawCounter = 0;
    int lawCounterInTable = 0;
    int amountOfLaws = 0;
    int lawAmountPass = 0;
    int lawAmountNotPass = 0;
    string characterText = "ברוכה הבאה";

    bool DisableVoteButton = true;// if we can vote or not(disable buttons), true will disable!.
    private bool isPopupVisible; // Flag to control popup visibility
    private string popupMessage = ""; // Message to display in the popup
    private string currentVoteType = ""; // The type of vote (For, Against, Avoid)



    protected override async Task OnInitializedAsync() {
        // make a connection.
        hub = new HubConnectionBuilder()
            .WithUrl(nav.ToAbsoluteUri("./chathub"))
            .WithAutomaticReconnect()
            .Build();

        await hub.StartAsync(); // start connection.

        if (hub != null) {
            myGroup.ConnectionID = hub.ConnectionId;
            hub.Reconnected += (newConnectionId) => ReConnect(newConnectionId);
        }
        // when someone login we get the user detailes and add it to the user list(to show it on screen).
        hub.On<Group>("GroupLogin", newGroup => {
            allGroups.Add(newGroup);
            msg = "";
            StateHasChanged();
            // Console.WriteLine("Added Group");
        });

        hub.On("StartTheGame", () => {
            // HandleStartGame();
        });

        hub.On("PointsDistributed", async () => {
            await GetAllGroups();
            foreach (Group group in allGroups) {
                if (myGroup.GroupID == group.GroupID) {
                    myGroup = group;
                }
            }
            // explenationCanvasDisplay = "none";
            groupListDisplay = "flex";
            characterText = "קיבלנו: " + myGroup.Points.ToString() + " קולות!";
            speechBubbleDisplay = "flex";


            // voteGameCanvasDisplay = "flex";
            StateHasChanged();
        });

        hub.On("StartVote", () => {
            StartVote();
            StateHasChanged();
        });
        hub.On<VoteDTO>("VoteUpdated", vote => {
            var law = myGame.LawList.FirstOrDefault(l => l.LawID == vote.LawID);
            if (law != null) {
                switch (vote.VoteType) {
                    case "For":
                        law.For += vote.Points;
                        break;
                    case "Against":
                        law.Against += vote.Points;
                        break;
                    case "Avoid":
                        law.Avoid += vote.Points;
                        break;
                }
                StateHasChanged();
            }
        });
        hub.On("showPieChart", async () => {
            await ShowPieChart();
            StateHasChanged();
        });
        hub.On("ShowNextLaw", () => {
            GetNextLaw();
            StateHasChanged();
        });
        hub.On("StartAgain", () => {
            StartAgain();
            StateHasChanged();
        });

        hub.On<Group>("GroupReconnected", reconnectedGroup => {
            Group userToUpdate = allGroups.Where(g => g.GroupID == reconnectedGroup.GroupID).FirstOrDefault();
            userToUpdate.ConnectionID = reconnectedGroup.ConnectionID;
            StateHasChanged();
        });
        hub.On<ReconnectingData>("GetData", Data => {
            lawCounter = Data.LawCounter;
            lawAmountPass = Data.LawAmountPass;
            lawAmountNotPass = Data.LawAmountNotPass;
            GetLawContent();
            // אולי להעביר אותו לשלב שלנו במשחק(חוקים או מסך התחלה))
            StateHasChanged();
        });



    }

    // private string selectedCharacter;

    // private void SetCharacter(string id, string src) {
    //     selectedCharacter = id;
    //     myGroup.Character = src;
    // }


    // if the user looged in:
    public bool IsConnected =>
    hub?.State == HubConnectionState.Connected;

    // release connection.
    public async ValueTask DisposeAsync() {
        if (hub != null) {
            await hub.DisposeAsync();
        }
    }

    async Task ReConnect(string newConnectionId) {
        myGroup.ConnectionID = newConnectionId;
        await hub.SendAsync("Reconnected", myGroup);
    }

    private async Task HandleGameError(HttpResponseMessage response) {
        var error = await response.Content.ReadAsStringAsync();
        switch (error) {
            case "No Game Code":
                msg = "קוד המשחק לא תקין";
                Console.WriteLine("we do not have a game with this code.");
                break;
            case "No Laws":
                msg = "קוד המשחק לא תקין";
                Console.WriteLine("this game do not have any laws");
                break;
            case "Not Enough Laws":
                msg = "המשחק לא זמין";
                Console.WriteLine("אין מספיק חוקים במשחק");
                break;
            case "Didnt Publish Game":
                msg = "המשחק לא פורסם";
                Console.WriteLine("המשחק לא פורסם");
                break;
            case "Failed to retrieve groups":
                msg = "לא מצאנו קבוצות";
                break;
            case "Didn't delete groups!":
                msg = "לא מחקנו את הקבוצות";
                break;
            case "Did Not Update GameStarted":
                msg = "לא עדכנו את התחלת המשחק";
                break;
            case "didnt insert":
                msg = "we did not insert the group";
                break;
            default:
                msg = "שגיאה בלתי צפויה";
                break;
        }
        Console.WriteLine(msg);
        await JS.InvokeVoidAsync("alert", msg);
    }

    async Task GetGame() {
        var gameResponse = await Http.GetAsync($"api/Laws/Game/{playerGameCode}");
        if (!gameResponse.IsSuccessStatusCode) {
            await HandleGameError(gameResponse);
            return;
        }
        Console.WriteLine("we got the game!");
        myGame = await gameResponse.Content.ReadFromJsonAsync<Game>();
        if (myGame.GameStarted == false) {
            msg = "המשחק לא התחיל, חכו למרצה.";
            await JS.InvokeVoidAsync("alert", msg);
            return;
        }
        firstCanvasDisplay = "none";
        chooseCharacterDisplay = "flex";
        msg = "";
        amountOfLaws = myGame.LawList.Count;

    }

    async Task LogIn() {
        if (string.IsNullOrEmpty(myGroup.Character)) {
            msg = "נא לבחור נציג לקבוצה.";
            await JS.InvokeVoidAsync("alert", msg);
            return;
        }
        if (string.IsNullOrEmpty(myGroup.GroupName)) {
            msg = "שם הקבוצה הוא שדה חובה.";
            await JS.InvokeVoidAsync("alert", msg);
            return;
        }
        else if (myGroup.GroupName.Length < 3 || myGroup.GroupName.Length > 15) {
            msg = "שם הקבוצה צריך להיות בין 3-15 תווים.";
            await JS.InvokeVoidAsync("alert", msg);
            return;
        }

        myGroup.GameID = myGame.GameID;
        Console.WriteLine(myGroup.GameID);
        var post = await Http.PostAsJsonAsync("api/Laws/InsertGroup", myGroup);

        if (!post.IsSuccessStatusCode) {
            await HandleGameError(post);
            return;
        }

        myGroup.GroupID = post.Content.ReadFromJsonAsync<int>().Result;
        logged = true;
        chooseCharacterDisplay = "none";
        containerDisplay = "flex";
        groupListDisplay = "flex";
        msg = "";
        // Retrieve all groups after logging in
        await GetAllGroups();

    }

    async Task GetAllGroups() {
        var response = await Http.GetAsync("api/Laws/GetAllGroups/" + myGame.GameID);
        if (response.IsSuccessStatusCode) {
            allGroups = await response.Content.ReadFromJsonAsync<List<Group>>();
            StateHasChanged();
            msg = "";
        }
        else {
            msg = "";
        }
    }


    void StartVote() {
        // gotVotesDisplay = "none";
        // voteScreenDisplay = "block";
        groupListDisplay = "none"; // hide the groups.
        voteGameCanvasDisplay = "flex"; // show the ga,e.
        LawContentContainerDisplay = "flex"; // show the law.
        scoreTableDisplay = "table"; // show the score table


        GetLawContent();
    }

    void GetLawContent() {
        if (lawCounter < myGame.LawList.Count) {
            currentLawTitle = myGame.LawList[lawCounter].Title;
            currentLawContent = myGame.LawList[lawCounter].Content;
            lawCounterInTable++;
        }
        else {
            currentLawTitle = "";
            currentLawContent = "finish Game!";
        }
        characterText = "בואו נצביע";
        // SetVoteTrueOrFalse();
        DisableVoteButton = false;// make the buttons clickable.
    }

    private void ShowPopup(string voteType) {
        currentVoteType = voteType; // Store the vote type
                                    // popupMessage = $"Are you sure you want to vote {voteType}?"; // Set the message
        isPopupVisible = true; // Show the popup
        switch (voteType) {
            case "For":
                popupMessage = "נצביע בעד?";
                break;
            case "Against":
                popupMessage = "נצביע נגד?";
                break;
            case "Avoid":
                popupMessage = "נצביע נמנע?";
                break;
        }

        // popupMessage = $"נצביע {voteType} ?"; // Set the message

    }

    private async Task OnPopupConfirm(bool isConfirmed) {
        isPopupVisible = false; // Hide the popup
        if (isConfirmed) {
            await SendVote(currentVoteType); // If confirmed, send the vote
        }
    }

    async Task SendVote(string voteType) {
        // Console.WriteLine(voteType);
        if (myGame != null && myGame.LawList != null && lawCounter < myGame.LawList.Count) {
            var vote = new VoteDTO {
                    GameID = myGame.GameID,
                    LawID = myGame.LawList[lawCounter].LawID,
                    VoteType = voteType,
                    Points = myGroup.Points
                };

            var response = await Http.PostAsJsonAsync("api/Laws/Vote", vote);
            if (response.IsSuccessStatusCode) {
                Console.WriteLine("Vote submitted successfully");
                DisableVoteButton = true;
            }
            else {
                Console.WriteLine("Failed to submit vote");
            }
        }
    }




    private bool CalculateResult() {
        if (myGame.LawList[lawCounter].For > 60) {
            lawAmountPass++;
            characterText = "ברכותי, החוק עבר!";
            // ChangeEmotion("happy");
            return true;
        }
        else {
            lawAmountNotPass++;
            characterText = "החוק לא עבר, נמשיך לנסות ";
            return false;
        }
    }



    private async Task ShowPieChart() {
        LawContentContainerDisplay = "none";
        PieChartContainerDisplay = "block";
        // characterText = "להלן התוצאות:";

        if (myGame.LawList.Count > 0 && lawCounter < myGame.LawList.Count) {
            var currentLaw = myGame.LawList[lawCounter];
            var data = new[] {
                new { label = "בעד", value = currentLaw.For },
                new { label = "נגד", value = currentLaw.Against },
                new { label = "נמנע", value = currentLaw.Avoid }
            };
            myGame.LawList[lawCounter].IsPass = CalculateResult();// return true/false.
            Console.WriteLine(myGame.LawList[lawCounter].IsPass);
            var dataJson = System.Text.Json.JsonSerializer.Serialize(data);// make it json.
            await JSRuntime.InvokeVoidAsync("createOrUpdatePieChart", dataJson);
        }
    }


    void GetNextLaw() {
        lawCounter++;
        // lawCounterInTable++;
        // לבדוק האם נגמרו החוקים
        if (lawCounter >= myGame.LawList.Count) {
            FinishGame();
            return;
        }
        //להביא את החוק הבא
        GetLawContent();
        //להסתיר את הגרף ולהראות את הכפתורים
        LawContentContainerDisplay = "flex";
        PieChartContainerDisplay = "none";
        characterText = "הצביעו עכשיו!";

    }

    void FinishGame() {
        Console.WriteLine("we finish vote");
        voteGameCanvasDisplay = "none";
        resultsContainerDisplay = "flex";
        PieChartContainerDisplay = "none";
        characterText = " סיימנו להצביע";
        scoreTableContainer = "none";
        scoreTableDisplay = "none"; // hide the score table

    }

    void StartAgain() {
        logged = false;
        playerGameCode = 0;
        allGroups = new List<Group>(); // reset the groups list.
        myGroup = new Group(); // reset the group.
        myGame = new Game();
        msg = "";
        ResetDisplayVars();

        currentLawTitle = "";
        currentLawContent = "";

        lawCounter = 0;
        lawCounterInTable = 0;
        amountOfLaws = 0;
        lawAmountPass = 0;
        lawAmountNotPass = 0;
        characterText = "ברוכים הבאים למליאה";
        selectedCharacter = "";

        DisableVoteButton = true;
        popupMessage = "";
        currentVoteType = "";
    }

    void ResetDisplayVars() {
        //divs
        firstCanvasDisplay = "flex";
        containerDisplay = "none";
        explenationCanvasDisplay = "none";
        voteGameCanvasDisplay = "none";
        groupListDisplay = "none";
        LawContentContainerDisplay = "flex";
        PieChartContainerDisplay = "none";
        resultsContainerDisplay = "none";
        chooseCharacterDisplay = "none";
        scoreTableDisplay = "none";
        // buttons
        startGameBtnDisplay = "none";
        startVoteBtnDisplay = "none";
        pieChartBtnDisplay = "none";
        speechBubbleDisplay = "flex";
        scoreTableContainer = "table";
    }



    // Initial character image paths
    private string maleCharacter = "./imgs/male.png";
    private string femaleCharacter = "./imgs/female.png";
    private string selectedCharacter = ""; // Default selected character


    void SetCharacter(string character) {
        selectedCharacter = character;

        // Set the default image based on selected character
        if (character == "male") {
            myGroup.Character = maleCharacter;
            myGroup.PassportCharacter = maleCharacter;
        }
        else if (character == "female") {
            myGroup.Character = femaleCharacter;
            myGroup.PassportCharacter = femaleCharacter;
        }
    }





}
