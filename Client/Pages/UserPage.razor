@page "/UserPage"
@inject HttpClient Http;
@inject NavigationManager nav;

@using Microsoft.AspNetCore.SignalR.Client;
@implements IAsyncDisposable;
@using NewBlazorProjecct.Shared.DTOs;



@if (msg != "") {
    <p style="margin:0;">@msg</p>
}

<div id="FristCanvas" style="display:@firsatCanvasDisplay">

    <h1>הקלד קוד משחק:</h1>
    <input type="number" @bind="playerGameCode" />
    <span>לדוגמה 101</span>
    <button @onclick="GetGame"> כניסה למשחק</button>
    <img class="images" src="./imgs/ballot-box.png" />

</div>


 <div id="chooseCharacter" style="display:@chooseCharacterDisplay">
    @if (!logged) {

            <div class="row justify-content-center">
                <div class="col text-center">
                    <h1>בחרו שם ונציג לקבוצה</h1>
                </div>
            </div>

            <div class="row align-items-center" style="height: 100vh; width:100%; align-self: baseline; max-height:70%">
                <div  class="col text-center characterColumm">
                    <img src="./imgs/mydiplo.png" style=" width:100%; cursor:pointer;" @onclick='() => SetCharacter("./imgs/mydiplo.png")' />
                </div>

                <div class="col text-center" style="align-content: center; height:100%">
                    <label>
                        שם הקבוצה:
                        <input @bind="myGroup.GroupName" class="form-control" />
                    </label>
                    <button class="btn btn-primary mt-2" @onclick="LogIn">התחברות</button>
                </div>

                <div class="col text-center characterColumm">
                    <img src="./imgs/femalediplo.png" style=" width:100%; cursor:pointer;" @onclick='() => SetCharacter("./imgs/femalediplo.png")' />
                </div>
            </div>
    }
</div>








<div class="container" style="display:@containerDisplay;">

    <div class="left-column">
        <div class="left-top">

                <div id="ForTable">
                    <table>
                        <thead> <tr>   <th id="pass">עברו</th> <th id="fall">נפלו</th>   </tr> </thead>
                        <tbody> <tr>   <td>@lawAmountPass</td>  <td>@lawAmountNotPass</td>   </tr> </tbody>
                    </table>
                </div>
        </div>

        <div class="left-middle">
            <p> @characterText </p>
        </div>

        <div class="left-bottom">
            <img src="@myGroup.Character" alt="myCharacter"  />
        </div>
    </div>





    <div class="right-column">
        @if (msg != "") {
            <p style="margin:0;">@msg</p>
        }



        <ul style="display:@groupListDisplay">
            @foreach (Group group in allGroups) {
                string myGroupClass = group.GroupID == myGroup.GroupID ? "my-group" : "";

                <li class="@myGroupClass">
                    <div class="header">
                        <p>@group.GroupName</p>
                    </div>
                    <div class="body">
                        <img src="@group.Character" />
                    </div>
                    <div class="footer">
                        <p>קולות: @group.Points.ToString()</p>
                    </div>
                </li>
            }
        </ul>


        <div id="explenation" style="display:@explenationCanvasDisplay">
            <h1>ברוכים הבאים למליאה!</h1>
            <p>אנו הולכים להצביע על החוקים החדשים ולהשפיע על חיי הכיתה!</p>
            <p>כל קבוצה תקבל מספר קולות אשר ישפיעו על עתידנו.</p>
        </div>





        <div id="voteGameCanvas" style="display:@voteGameCanvasDisplay">

            <div class="row  biggerHalf">

                <div id="LawContentContainer" style="display:@LawContentContainerDisplay">

                    <div class="row half head">
                        <div id="lawWrapper">   <div id="law">@currentLawContent</div>   </div>
                    </div>

                    <div class="row half bottom">
                        <div id="cardsContainer">
                            <button id="Against" @onclick='( () => ShowPopup("Against") )' disabled="@DisableVoteButton"> נגד </button>
                            <button id="Avoid" @onclick='( () => ShowPopup("Avoid") )' disabled="@DisableVoteButton"> נמנע </button>
                            <button id="For" @onclick='( () => ShowPopup("For") )' disabled="@DisableVoteButton"> בעד </button>
                        </div>
                    </div>
                    @if (isPopupVisible) {
                        <PopUp Message="@popupMessage" OnConfirm="OnPopupConfirm" />
                    }



                </div>

                <div id="PieChartContainer" style="display:@PieChartContainerDisplay">
                    <div id="canvasContainer"> <canvas id="myPieChart"></canvas> </div>
                </div>


            </div>


        </div>

        <!--  RESULTS SCREEN  -->
        <div id="resultsContainer" style="display:@resultsContainerDisplay">
            <div id="ForTable">
                <table>
                    <thead> <tr>   <th id="pass">עברו</th> <th id="fall">נפלו</th>   </tr> </thead>
                    <tbody> <tr>   <td>@lawAmountPass</td>  <td>@lawAmountNotPass</td>   </tr> </tbody>
                </table>
            </div>
        </div>



    </div>



</div>










@code {

    private HubConnection? hub;// the connection to the Hub.
    Group myGroup = new Group(); // My user, will save the id.
    bool logged = false;
    List<Group> allGroups = new List<Group>();// list for all the users.
    int playerGameCode = 0;// the code from the input of the player.
    Game myGame = new Game(); // containe the game withe the laws.

    string msg;// handle the error msg.

    // display divs.
    string firsatCanvasDisplay = "flex";
    string containerDisplay = "none";
    string explenationCanvasDisplay = "none";
    string voteGameCanvasDisplay = "none";
    string groupListDisplay = "none";

    // display buttons
    string startGameBtnDisplay = "none";
    string startVoteBtnDisplay = "none";
    string pieChartBtnDisplay = "none";


    // check if they exist
    string chooseCharacterDisplay = "none";
    string secondCanvasDisplay = "none";
    // string explenationCanvasDisplay = "none";
    string gotVotesDisplay = "none";
    string voteScreenDisplay = "none";
    string LawContentContainerDisplay = "flex";
    string PieChartContainerDisplay = "none";
    string resultsContainerDisplay = "none";

    // string myGroupClass = ""; // defaine the class of our group only.

    string currentLawContent = "the law content will be here";
    int lawCounter = 0;
    int lawAmountPass = 0;
    int lawAmountNotPass = 0;
    string characterText = "ברוכים הבאים למליאה";

    bool DisableVoteButton = true;// if we can vote or not(disable buttons), true will disable!.
    private bool isPopupVisible; // Flag to control popup visibility
    private string popupMessage = ""; // Message to display in the popup
    private string currentVoteType = ""; // The type of vote (For, Against, Avoid)



    protected override async Task OnInitializedAsync() {
        // make a connection.
        hub = new HubConnectionBuilder()
            .WithUrl(nav.ToAbsoluteUri("./chathub"))
            .WithAutomaticReconnect()
            .Build();

        await hub.StartAsync(); // start connection.

        if (hub != null) {
            myGroup.ConnectionID = hub.ConnectionId;
            hub.Reconnected += (newConnectionId) => ReConnect(newConnectionId);
        }
        // when someone login we get the user detailes and add it to the user list(to show it on screen).
        hub.On<Group>("GroupLogin", newGroup => {
            allGroups.Add(newGroup);
            msg = "";
            StateHasChanged();
            // Console.WriteLine("Added Group");
        });

        hub.On("StartTheGame", () => {
            HandleStartGame();
        });

        hub.On("PointsDistributed", async () => {
            await GetAllGroups();
            foreach (Group group in allGroups) {
                if(myGroup.GroupName == group.GroupName) {
                    myGroup = group;
                }
            }
            explenationCanvasDisplay = "none";
            groupListDisplay = "flex";
            characterText = "קיבלנו: " + myGroup.Points.ToString() + " קולות!";


            // voteGameCanvasDisplay = "flex";
            StateHasChanged();
        });

        hub.On("StartVote", () => {
            StartVote();
            StateHasChanged();
        });
        hub.On<VoteDTO>("VoteUpdated", vote => {
            var law = myGame.LawList.FirstOrDefault(l => l.LawID == vote.LawID);
            if (law != null) {
                switch (vote.VoteType) {
                    case "For":
                        law.For += vote.Points;
                        break;
                    case "Against":
                        law.Against += vote.Points;
                        break;
                    case "Avoid":
                        law.Avoid += vote.Points;
                        break;
                }
                StateHasChanged();
            }
        });
        hub.On("showPieChart", async () => {
            await ShowPieChart();
            StateHasChanged();
        });
        hub.On("ShowNextLaw", () => {
            GetNextLaw();
            StateHasChanged();
        });
        hub.On("StartAgain", () => {
            StartAgain();
            StateHasChanged();
        });

        hub.On<Group>("GroupReconnected", reconnectedGroup => {
            Group userToUpdate = allGroups.Where(g => g.GroupID == reconnectedGroup.GroupID).FirstOrDefault();
            userToUpdate.ConnectionID = reconnectedGroup.ConnectionID;
            StateHasChanged();
        });
        hub.On<ReconnectingData>("GetData", Data => {
            lawCounter = Data.LawCounter;
            lawAmountPass = Data.LawAmountPass;
            lawAmountNotPass = Data.LawAmountNotPass;
            GetLawContent();
            // אולי להעביר אותו לשלב שלנו במשחק(חוקים או מסך התחלה))
            StateHasChanged();
        });



    }


    // if the user looged in:
    public bool IsConnected =>
    hub?.State == HubConnectionState.Connected;

    // release connection.
    public async ValueTask DisposeAsync() {
        if (hub != null) {
            await hub.DisposeAsync();
        }
    }

    async Task ReConnect(string newConnectionId) {
        myGroup.ConnectionID = newConnectionId;
        await hub.SendAsync("Reconnected", myGroup);
    }


    async Task GetGame() {
        var response = await Http.GetAsync("api/Laws/Game/" + playerGameCode);
        if (response.IsSuccessStatusCode == true) {
            myGame = response.Content.ReadFromJsonAsync<Game>().Result;
            if (myGame.GameStarted == false) {
                msg = "המשחק לא התחיל, חכו למרצה.";
                return;
            }

            firsatCanvasDisplay = "none";
            // containerDisplay = "flex";

            chooseCharacterDisplay = "flex";
        }
        else {
            Console.WriteLine("wrong");
            string error = response.Content.ReadAsStringAsync().Result;
            switch (error) {
                case "No Game Code":
                    msg = "קוד המשחק לא תקין";
                    Console.WriteLine("we do not have a game with this code.");
                    break;
                case "No Laws":
                    msg = "קוד המשחק לא תקין";
                    Console.WriteLine("this game do not have any laws");
                    break;
                case "Not Enough Laws":
                    msg = "המשחק לא זמין";
                    Console.WriteLine("אין מספיק חוקים במשחק");
                    break;
                case "Didnt Publish Game":
                    msg = "המשחק לא זמין";
                    Console.WriteLine("המשחק לא פורסם");
                    break;
            }
        }

    }

    void SetCharacter(string src) {
        myGroup.Character = src;
    }

    async Task LogIn() {
        if (string.IsNullOrEmpty(myGroup.Character)) {
            msg = "נא לבחור נציג לקבוצה.";
            return;
        }
        if (string.IsNullOrEmpty(myGroup.GroupName)) {
            msg = "שם הקבוצה הוא שדה חובה.";
            return;
        }
        else if (myGroup.GroupName.Length < 3 || myGroup.GroupName.Length > 15) {
            msg = "שם הקבוצה צריך להיות בין 3-15 תווים.";
            return;
        }
        // Console.WriteLine("Login");
        myGroup.GameID = myGame.GameID;
        var post = await Http.PostAsJsonAsync("api/Laws/InsertGroup", myGroup);
        if (post.IsSuccessStatusCode) {
            myGroup.GroupID = post.Content.ReadFromJsonAsync<int>().Result;
            logged = true;
            chooseCharacterDisplay = "none";
            containerDisplay = "flex";
            groupListDisplay = "flex";
            // secondCanvasDisplay = "flex";
            msg = "";
            // Retrieve all groups after logging in
            await GetAllGroups();
        }
        else {
            Console.WriteLine("wrong Login");
            string error = post.Content.ReadAsStringAsync().Result;
            switch (error) {
                case "didnt insert":
                    msg = "we did not insert the group";
                    break;
            }
        }
    }

    async Task GetAllGroups() {
        var response = await Http.GetAsync("api/Laws/GetAllGroups/" + myGame.GameID);
        if (response.IsSuccessStatusCode) {
            allGroups = await response.Content.ReadFromJsonAsync<List<Group>>();
            StateHasChanged();
            msg = "";
        }
        else {
            msg = "";
        }
    }


    void HandleStartGame() {
        groupListDisplay = "none";
        explenationCanvasDisplay = "block";
        characterText = ""; // no text to character when explaining.
        InvokeAsync(StateHasChanged);
    }

    void StartVote() {
        // gotVotesDisplay = "none";
        // voteScreenDisplay = "block";
        groupListDisplay = "none";
        voteGameCanvasDisplay = "flex";
        LawContentContainerDisplay = "flex";


        GetLawContent();
    }

    void GetLawContent() {
        if (lawCounter < myGame.LawList.Count) {
            currentLawContent = myGame.LawList[lawCounter].Content;
        }
        else {
            currentLawContent = "finish Game!";
        }
        characterText = "בואו נצביע";

        // SetVoteTrueOrFalse();
        DisableVoteButton = false;// make the buttons clickable.
    }

    private void ShowPopup(string voteType) {
        currentVoteType = voteType; // Store the vote type
        // popupMessage = $"Are you sure you want to vote {voteType}?"; // Set the message
        isPopupVisible = true; // Show the popup
        switch (voteType) {
            case "For":
                popupMessage = "נצביע בעד?";
                break;
            case "Against":
                popupMessage = "נצביע נגד?";
                break;
            case "Avoid":
                popupMessage = "נצביע נמנע?";
                break;
        }

        // popupMessage = $"נצביע {voteType} ?"; // Set the message

    }

    private async Task OnPopupConfirm(bool isConfirmed) {
        isPopupVisible = false; // Hide the popup
        if (isConfirmed) {
            await SendVote(currentVoteType); // If confirmed, send the vote
        }
    }

    async Task SendVote(string voteType) {
        // Console.WriteLine(voteType);
        if (myGame != null && myGame.LawList != null && lawCounter < myGame.LawList.Count) {
            var vote = new VoteDTO {
                    GameID = myGame.GameID,
                    LawID = myGame.LawList[lawCounter].LawID,
                    VoteType = voteType,
                    Points = myGroup.Points
            };

            var response = await Http.PostAsJsonAsync("api/Laws/Vote", vote);
            if (response.IsSuccessStatusCode) {
                Console.WriteLine("Vote submitted successfully");
                DisableVoteButton = true;
            }
            else {
                Console.WriteLine("Failed to submit vote");
            }
        }
    }




    private bool CalculateResult() {
        if (myGame.LawList[lawCounter].For > myGame.LawList[lawCounter].Against) {
            lawAmountPass++;
            characterText = "ברכותי! החוק עבר!";
            return true;
        }
        else {
            lawAmountNotPass++;
            characterText = "החוק לא עבר, נמשיך לנסות ";
            return false;
        }
    }



    private async Task ShowPieChart() {
        LawContentContainerDisplay = "none";
        PieChartContainerDisplay = "block";
        // characterText = "להלן התוצאות:";

        if (myGame.LawList.Count > 0 && lawCounter < myGame.LawList.Count) {
            var currentLaw = myGame.LawList[lawCounter];
            var data = new[] {
                new { label = "For", value = currentLaw.For },
                new { label = "Against", value = currentLaw.Against },
                new { label = "Avoid", value = currentLaw.Avoid }
            };
            myGame.LawList[lawCounter].IsPass = CalculateResult();// return true/false.
            Console.WriteLine(myGame.LawList[lawCounter].IsPass);
            var dataJson = System.Text.Json.JsonSerializer.Serialize(data);// make it json.
            await JSRuntime.InvokeVoidAsync("createOrUpdatePieChart", dataJson);
        }
    }


    void GetNextLaw() {
        lawCounter++;
        // לבדוק האם נגמרו החוקים
        if (lawCounter >= myGame.LawList.Count) {
            FinishGame();
            return;
        }
        //להביא את החוק הבא
        GetLawContent();
        //להסתיר את הגרף ולהראות את הכפתורים
        LawContentContainerDisplay = "flex";
        PieChartContainerDisplay = "none";
        characterText = "הצביעו עכשיו!";

    }

    void FinishGame() {
        Console.WriteLine("we finish vote");
        voteGameCanvasDisplay = "none";
        resultsContainerDisplay = "block";
        PieChartContainerDisplay = "none";
        characterText = " סיימנו להצביע";

        // foreach (LawsDTO law in myGame.LawList) {
        //     if (law.IsPass == true) {
        //         lawAmountPass++;
        //     }
        //     else {
        //         lawAmountNotPass++;
        //     }
        // }

    }

    void StartAgain() {
        firsatCanvasDisplay = "flex";
        resultsContainerDisplay = "none";
        msg = "";
        myGroup = new Group(); // reset the group.
        allGroups = new List<Group>(); // reset the groups list.
        playerGameCode = 0;
        myGame = new Game();
        logged = false;
        lawAmountNotPass = 0;
        lawAmountPass = 0;
        lawCounter = 0;
        characterText = "ברוכים הבאים למליאה";

    }



}
