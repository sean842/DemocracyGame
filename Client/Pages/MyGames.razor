@page "/MyGames/{UserID:int}"
@inject HttpClient Http;
@inject NavigationManager nav;
@using NewBlazorProjecct.Shared.DTOs;

@if(msg != null) { @msg; }

<div class="upperRow" >
    <h3> שלום @myUser.Name </h3>

    <input type="text" placeholder="הקלד שם למשחק חדש" @bind="gameNameToAdd" />
    <button class="btn btn-primary"  @onclick="AddNewGame">הוסף משחק</button>

</div>
<div style="height:70%;display: flex; justify-content: center">

    @if (myUser != null && myUser.GameList != null) {
        <div class="table-container">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>שם המשחק</th>
                        <th>קוד המשחק</th>
                        <th>מספר חוקים</th>
                        <th>עריכה</th>
                        <th>
                            מצב פרסום
                            
                                <Tooltip Title="משחק יפורסם עם 3 חוקים ויותר">
                                    <span class="info-icon">
                                        <span class="info-circle">i</span>
                                    </span>
                                </Tooltip>
                            
                        </th>
                        <th>מחיקה</th>
                    </tr>
                </thead>
                <tbody>
                    @if (myUser.GameList.Count > 0) {
                        @foreach (GameLawCount game in myUser.GameList) {
                            <tr>
                                <td>@game.GameName</td>
                                <td>@game.GameCode</td>
                                <td>@game.LawsNumber</td>
                                <td><button class="btn btn-info" @onclick="(() => Navigate(game.GameCode))">עריכה</button></td>
                                <td>
                                    @if (game.CanPublish == false) {
                                        <input type="checkbox" disabled />
                                    }
                                    else {
                                        <input type="checkbox" checked="@game.IsPublish" @onchange="(() => changePublish(game))" />
                                    }
                                </td>
                                <td><button class="btn btn-danger" @onclick="(() => ShowPopUp(game))">מחיקה</button></td>
                            </tr>
                        }
                    }
                    else {
                        <tr>
                            <td colspan="6">אין משחקים</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }


</div>
@if (isPopupVisible) {
    <PopUp Message="@popupMessage" OnConfirm="OnPopupConfirm" />

}


@code {

    [Parameter]
    public int UserID { get; set; }
    // [Parameter]// צריך לבדוק האם זה צריך להיות פרמטר
    // public int GameID { get; set; }

    User myUser = new User();
    GameLawCount gameToDelete = new GameLawCount();

    string gameNameToAdd = "";
    string msg = "";
    string popupMessage = "";
    bool isPopupVisible = false;




    protected override async Task OnInitializedAsync() {
        var userResponse = await Http.GetAsync("api/Generator/" + UserID + "/GetGames");
        if (userResponse.IsSuccessStatusCode) {
            myUser = await userResponse.Content.ReadFromJsonAsync<User>();
        }
        else {
            string error = await userResponse.Content.ReadAsStringAsync();
            switch (error) {
                case "No User":
                    msg = "Didn't find the user.";
                    break;
                default:
                    msg = "An error occurred.";
                    break;

            }

        }
    }



    async Task AddNewGame() {
        if (string.IsNullOrEmpty(gameNameToAdd) || gameNameToAdd.Length < 3 || gameNameToAdd.Length > 15) {
            msg = "שם המשחק צריך להיות בין 3-15 תווים.";
            return;
        }

        var response = await Http.GetAsync("api/Generator/" + UserID + "/AddGame/" + gameNameToAdd);
        if (response.IsSuccessStatusCode) {
            GameLawCount newGame = response.Content.ReadFromJsonAsync<GameLawCount>().Result;
            myUser.GameList.Add(newGame);
            // GameID = newGame.GameID;
            Navigate(newGame.GameCode);
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            switch (error) {
                case "Not Insert":
                    msg = "Didn't insert the game";
                    break;
                case "Not Update":
                    msg = "Did not update the game code.";
                    break;
                case "Not Get":
                    msg = "didn't got the game";
                    break;
                default:
                    msg = "An error occurred.";
                    break;
            }

        }
    }


    void Navigate(int gameCode) {
        // GameID = Gameid;
        nav.NavigateTo("./EditGame/" + gameCode + "/" + UserID);
    }


    void ShowPopUp(GameLawCount game) {
        popupMessage = "למחוק את המשחק: " + game.GameName + "?";
        gameToDelete = game;
        isPopupVisible = true; // Show the popup
    }

    private async Task OnPopupConfirm(bool isConfirmed) {
        isPopupVisible = false; // Hide the popup
        if (isConfirmed) {
            await DeleteGame(gameToDelete); // If confirmed, sent the game to delete.
        }

    }

    public async Task DeleteGame(GameLawCount gameToDelete) {
        var respons = await Http.DeleteAsync("api/Generator/" + UserID + "/DeleteGame/" + gameToDelete.GameID);
        if (respons.IsSuccessStatusCode) {
            myUser.GameList.Remove(gameToDelete);
        }
        else {
            string error = await respons.Content.ReadAsStringAsync();
            switch (error) {
                case "Not Delete":
                    msg = "Didn't delete the game.";
                    break;
                default:
                    msg = "An error occurred.";
                    break;

            }

        }
    }


    protected async Task changePublish(GameLawCount game) {
        PublishGame gameToSend = new PublishGame();
        gameToSend.GameID = game.GameID;
        gameToSend.IsPublish = !game.IsPublish;

        var userRes = await Http.PostAsJsonAsync("api/Generator/" + UserID + "/PublishGame", gameToSend);
        if (userRes.IsSuccessStatusCode == true) {
            GameLawCount updatedGame = userRes.Content.ReadFromJsonAsync<GameLawCount>().Result;
            int index = myUser.GameList.IndexOf(game);
            myUser.GameList[index] = updatedGame;

            if (gameToSend.IsPublish != updatedGame.IsPublish) {
                msg = "Can't publish the game";
            }

        }
        else {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error) {
                case "Update Failed":
                    msg = "Failed to update";
                    break;
                case "not get game":
                    msg = "we didnt got the game";
                    break;
                default:
                    msg = "An error occurred.";
                    break;
            }

        }
    }



}

