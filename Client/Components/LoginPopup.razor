@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@using NewBlazorProjecct.Shared.DTOs
@inject NewBlazorProjecct.Shared.Services.UserService UserService

@if (isVisible) {
    <div class="modal" style="display:block;">
        <div class="modal-content">
            <span class="close" @onclick="Hide">&times;</span>
            <h3>Login</h3>

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label>Username:</label>
                    <InputText @bind-Value="loginModel.Name" />
                </div>
                <div>
                    <label>Password:</label>
                    <InputNumber @bind-Value="loginModel.Password" type="password" />
                </div>
                <button type="submit">Login</button>
            </EditForm>
            @if (!string.IsNullOrEmpty(errorMessage)) {
                <p style="color:red;">@errorMessage</p>
            }
        </div>
    </div>
}

@code {
    private Login loginModel = new Login();
    private bool isVisible = false;
    private string errorMessage = string.Empty;

    [Parameter]
    public EventCallback OnLoginSuccess { get; set; }

    

    private async Task HandleLogin() {
        errorMessage = string.Empty;
        var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

        if (response.IsSuccessStatusCode) {
            // Get the User from the response
            var user = await response.Content.ReadFromJsonAsync<User>();
            UserService.Login(user); // Update the UserService with logged in user
            await OnLoginSuccess.InvokeAsync();
            isVisible = false;

            // Navigate to MyGames with UserID
            Navigation.NavigateTo($"./MyGames/{user.UserID}");
        }
        else {
            var errorResponse = await response.Content.ReadAsStringAsync();
            errorMessage = string.IsNullOrEmpty(errorResponse) ? "Invalid username or password" : errorResponse;
        }
    }


    public void Show() {
        isVisible = true;
        StateHasChanged();
    }

    public void Hide() {
        isVisible = false;
        errorMessage = string.Empty;
        StateHasChanged();
        loginModel.Name = string.Empty;
        loginModel.Password = 0;
    }
}

<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>
