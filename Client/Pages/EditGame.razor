@page "/EditGame/{GameCode:int}/{UserID:int}"
@inject HttpClient Http
@inject NavigationManager nav
@using NewBlazorProjecct.Shared.DTOs
@inject IJSRuntime JS


@if (myGame != null) {
    <div class="container">

        <div class="upperRow">
            <button class="defaultBTN" @onclick="UpdateGame">עדכון משחק</button>
            <h1>עריכת משחק</h1>
            <button class="defaultBTN" @onclick="ShowReturnPopup">חזרה לטבלת המשחקים </button>
        </div>


        <div class="lowerRow">

            <div class="col rightSide">

                <div class="generalSettings">

                    <div class="gamenamebox">

                        <div>
                            <p style="margin:0; ">שם המשחק</p>
                            <Tooltip Title=" שם המשחק יכול להיות בין 3-20 תווים">
                                <span class="info-icon">
                                    <span class="info-circle">i</span>
                                </span>
                            </Tooltip>
                            <span class="@inputClassSpanName"> 20/ @myGame.GameName.Length </span>

                        </div>

                        <input type="text" @bind="myGame.GameName" class="defaultINPUT extra-input-css"
                               @bind:event="oninput" @onkeyup="countChars" maxlength="20" style="font-weight: normal;" />

                    </div>

                    <div class="score">

                        <div style="max-height:35%;">
                            <p style="margin:0; "> חלוקת ניקוד </p>
                            <Tooltip Title="בלחיצה על כפתור זה, נחליט אם לחלק את הנקודות באופן שווה או אקראי">
                                <span class="info-icon">
                                    <span class="info-circle">i</span>
                                </span>
                            </Tooltip>
                        </div>



                        <div class="checkbox-container">
                            <span class="@spanEqualClass"> שווה </span>

                            <label class="switch">
                                <input type="checkbox" checked="@myGame.ScoreFormat" @onchange="changeFormat">
                                <span class="slider"></span>
                            </label>
                            <span class="@spanRandomClass">  אקראי </span>

                        </div>


                    </div>
                </div>

                <div class="addOrEditLaw">

                    @if (singleLaw == null) {
                        <div class="buttonWrap">

                            <button class="defaultBTN" @onclick="AddLaw">הוספת חוק חדש </button>
                        </div>
                    }
                    else {

                         <div class="law-title">

                            <div class="setText">
                                <p style="margin:0;">כותרת החוק</p>

                                <Tooltip Title="כותרת החוק יכולה להכיל בין 3-25 תווים">
                                    <span class="info-icon">
                                        <span class="info-circle">i</span>
                                    </span>
                                </Tooltip>

                                <span class="@inputClassSpanTitle" > 25/ @singleLaw.Title.Length  </span>
                            </div>

                            <input type="text" @bind="singleLaw.Title" @bind:event="oninput" class="defaultINPUT extra-input-css" @onkeyup="countCharsLawsTitle" maxlength="25" />

                        </div>

                        <div class="law-content">

                            <div class="setText">

                                <p style="margin:0; margin-left:.3rem;">תוכן החוק</p>

                                <Tooltip Title="תוכן החוק יכול להכיל בין 3-50 תווים">
                                    <span class="info-icon">
                                        <span class="info-circle">i</span>
                                    </span>
                                </Tooltip>

                                <span class="@inputClassSpanContent" > 50/ @singleLaw.Content.Length  </span>

                            </div>

                            <input @bind="singleLaw.Content" @bind:event="oninput" class="defaultINPUT extra-input-css" @onkeyup="countCharsLawsContent" maxlength="50"></input>
                        </div>

                        <div class="btn-wraper">
                            <button class="defaultBTN" style="width:55%;margin:0;" @onclick="CheckLawSaving">שמירת החוק</button>
                        </div>







@*                         <div class="col-5 lawRight">

                            <div class="setText">
                                <p style="margin:0; margin-left:.3rem;">כותרת החוק</p>
                                <Tooltip Title="כותרת החוק יכולה להכיל בין 3-25 תווים">
                                    <span class="info-icon">
                                        <span class="info-circle">i</span>
                                    </span>
                                </Tooltip>
                                <span class="@inputClassSpanTitle" style="font-size:.5rem;"> @singleLaw.Title.Length / 25 </span>
                            </div>
                            <textarea @bind="singleLaw.Title" @bind:event="oninput" class="defaultINPUT" @onkeyup="countCharsLawsTitle" maxlength="25"></textarea>
                            <button class="defaultBTN" style="width:55%;margin:0;" @onclick="CheckLawSaving">שמירת החוק</button>

                        </div>

                        <div class="col-5 lawLeft">
                            <div class="setText">

                                <p style="margin:0; margin-left:.3rem;">תוכן החוק</p>
                                <Tooltip Title="תוכן החוק יכול להכיל בין 3-50 תווים">
                                    <span class="info-icon">
                                        <span class="info-circle">i</span>
                                    </span>
                                </Tooltip>
                                <span class="@inputClassSpanContent" style="font-size:.5rem;"> @singleLaw.Content.Length / 50 </span>

                            </div>
                            <textarea @bind="singleLaw.Content" @bind:event="oninput" class="defaultINPUT" @onkeyup="countCharsLawsContent" maxlength="50"></textarea>

                        </div>
 *@

                    }


                </div>

            </div>

            <div class="col leftSide">


                <div class="table-container">

                    <table class="table rulestable">

                        <thead>
                            <tr>
                                <th> כותרת החוק </th>
                                <th> עריכה </th>
                                <th> מחיקה </th>
                            </tr>
                        </thead>

                        <tbody>
                            @if (myGame.LawList == null || myGame.LawList.Count == 0) {
                                <tr>
                                    <td colspan="3"> אין חוקים קיימים </td>
                                </tr>
                            }
                            else {
                                int index = 0;
                                foreach (var law in myGame.LawList) {
                                    <tr class="@GetRowClass(index)">
                                        <td style="font-weight:bold;"> @law.Title  </td>
                                        <td>
                                            <button class="icon-button" @onclick="(() => SendLawToUpdate(law))">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </td>
                                        <td>
                                            <button class="icon-button delete-button" @onclick="(() => ShowPopUp(law))">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </td>
                                    </tr>
                                    index++;
                                }

                            }
                        </tbody>

                    </table>

                </div>
            </div>


        </div>


    </div>




}
else {
    <p>טוען נתוני משחק.. </p>
}

@if (isPopupVisible) {
    <PopUp Message="@popupMessage" OnConfirm="OnPopupConfirm" />

}



@code {
    [Parameter] public int UserID { get; set; }
    [Parameter] public int GameCode { get; set; }
    string msg = "";
    Game myGame; // contain the whole game.
    LawsDTO singleLaw; // will contain a single law so we can update him.
    bool editState = false; // Add or Update law, true is for Update and false is for Add.

    LawsDTO lawToDelete = new LawsDTO();
    string updateOrNewLawText = "הוספת חוק חדש";
    string popupMessage = "";
    bool isPopupVisible = false;

    bool goBack = false; // to check if we go back page or delete law. false = delete law, trou = go back.


    string inputClassSpanName = "";
    string inputClassSpanTitle = "";
    string inputClassSpanContent = "";

    string spanEqualClass = "";
    string spanRandomClass = "";


    void countChars() {
        int charLength = myGame.GameName.Length;
        switch (charLength) {
            case < 3:
                inputClassSpanName = "danger-input";
                break;
            case >= 3 and <= 10:
                inputClassSpanName = "good-input";
                break;
            case > 10 and <= 19:
                inputClassSpanName = "warnning-input";
                break;
            case > 19:
                inputClassSpanName = "danger-input";
                break;
            default:
                inputClassSpanName = "default-input";
                break;
        }
    }
    void countCharsLawsTitle() {
        if (singleLaw == null) {
            inputClassSpanTitle = "default-input";
            return;
        }
        int lawsLength = singleLaw.Title.Length;
        switch (lawsLength) {
            case < 3:
                inputClassSpanTitle = "danger-input";
                break;
            case >= 3 and <= 15:
                inputClassSpanTitle = "good-input";

                break;
            case > 15 and <= 24:
                inputClassSpanTitle = "warnning-input";

                break;
            case > 24:
                inputClassSpanTitle = "danger-input";

                break;
            default:
                inputClassSpanTitle = "default-input";
                break;
        }
    }
    void countCharsLawsContent() {
        if (singleLaw == null) {
            inputClassSpanContent = "default-input";
            return;
        }

        int lawsLength = singleLaw.Content.Length;
        switch (lawsLength) {
            case < 3:
                inputClassSpanContent = "danger-input";
                break;
            case >= 3 and <= 30:
                inputClassSpanContent = "good-input";
                break;
            case > 30 and <= 49:
                inputClassSpanContent = "warnning-input";
                break;
            case > 49:
                inputClassSpanContent = "danger-input";
                break;
            default:
                inputClassSpanContent = "default-input";
                break;
        }
    }

    protected override async Task OnInitializedAsync() {
        var response = await Http.GetAsync($"api/Generator/{UserID}/GetOneGame/{GameCode}");
        if (response.IsSuccessStatusCode) {
            myGame = await response.Content.ReadFromJsonAsync<Game>();
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "No Game Code" => "We do not have a game with this code.",
                "No Laws" => "This game does not have any laws",
                _ => "An unknown error occurred."
            };
        }
        countChars();
        countCharsLawsTitle();
        countCharsLawsContent();
        HighlightText();
    }

    private string GetRowClass(int index) {
        return index % 2 == 0 ? "row-color-1" : "row-color-2";
    }


    // public void AddLaw() => singleLaw = new LawsDTO();
    // public void AddLaw() => singleLaw = new LawsDTO { GameID = myGame.GameID, Title = " ", Content = "" };

    public void AddLaw() {
        singleLaw = new LawsDTO {
                GameID = myGame.GameID,
                Title = string.Empty,
                Content = string.Empty
            };
        countCharsLawsTitle();
        countCharsLawsContent();

    }


    void SendLawToUpdate(LawsDTO lawToUpdate) {
        singleLaw = lawToUpdate;
        editState = true;
        countCharsLawsTitle();
        countCharsLawsContent();

    }


    bool CheckLawTitle() {
        return singleLaw.Title.Length >= 3 && singleLaw.Title.Length <= 25;
    }

    bool CheckLawContent() {
        return singleLaw.Content.Length >= 3 && singleLaw.Title.Length <= 50;
    }

    bool CheckGameName() {
        return myGame.GameName.Length >= 3 && myGame.GameName.Length <= 20;
    }

    async void CheckLawSaving() {
        if (!CheckLawTitle()) {
            msg = "כותרת החוק צריכה להיות בין 3-25 תווים.";
            await JS.InvokeVoidAsync("alert", msg);
            return;
        }

        if (!CheckLawContent()) {
            msg = "תוכן החוק צריך להיות בין 3-50 תווים.";
            await JS.InvokeVoidAsync("alert", msg);
            return;
        }


        if (editState) {
            updateOrNewLawText = "עדכון חוק";
            await UpdateLaw();
        }
        else {
            updateOrNewLawText = "הוספת חוק חדש";
            await AddNewLaw();
        }
    }

    async Task UpdateLaw() {
        LawToUpdate lawToUpdate = new LawToUpdate();
        lawToUpdate.LawID = singleLaw.LawID;
        lawToUpdate.Title = singleLaw.Title;
        lawToUpdate.Content = singleLaw.Content;

        var response = await Http.PostAsJsonAsync("api/Generator/" + UserID + "/UpdateLaw", lawToUpdate);
        if (response.IsSuccessStatusCode) {
            var newLaw = await response.Content.ReadFromJsonAsync<LawsDTO>();
            int index = myGame.LawList.IndexOf(singleLaw);
            myGame.LawList[index] = newLaw;
            editState = false;
            singleLaw = null;
            updateOrNewLawText = "הוספת חוק חדש";
            StateHasChanged(); // Ensure the UI updates
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "Didnt Update" => "We did not update the law.",
                "Didnt Get Law" => "We did not get the law.",
                _ => "An unknown error occurred."
            };
            await JS.InvokeVoidAsync("alert", msg);

        }
    }

    async Task AddNewLaw() {
        LawToAdd lawToAdd = new LawToAdd();
        lawToAdd.GameID = singleLaw.GameID;
        lawToAdd.Title = singleLaw.Title;
        lawToAdd.Content = singleLaw.Content;
        Console.WriteLine($"gmaeID:{singleLaw.GameID}, title:{singleLaw.Title}, content: {singleLaw.Content}");
        // var response = await Http.PostAsJsonAsync($"api/Generator/{UserID}/AddNewLaw/", singleLaw);
        var response = await Http.PostAsJsonAsync($"api/Generator/{UserID}/AddNewLaw/", lawToAdd);

        if (response.IsSuccessStatusCode) {
            var newLaw = await response.Content.ReadFromJsonAsync<LawsDTO>();
            if (newLaw != null) {
                myGame.LawList.Add(newLaw);
                singleLaw = null;
                StateHasChanged(); // Ensure the UI updates
            }
            else {
                msg = "Failed to parse new law.";
            }
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "Not Save Law" => "We did not save the law.",
                "Not Get Law" => "We did not get the law.",
                _ => "An unknown error occurred."
            };
            await JS.InvokeVoidAsync("alert", msg);

        }
    }



    void changeFormat() {
        myGame.ScoreFormat = !myGame.ScoreFormat; // Toggle the value
        HighlightText();
    }

    void HighlightText() {
        if (myGame.ScoreFormat) {
            Console.WriteLine(myGame.ScoreFormat);
            spanEqualClass = "Bold";
            spanRandomClass = "Normal";
        }
        else {
            Console.WriteLine(myGame.ScoreFormat);

            spanEqualClass = "Normal";
            spanRandomClass = "Bold";
        }
    }

    async Task UpdateGame() {

        if (!CheckGameName()) {
            msg = "שם המשחק צריך להיות בין 3-20 תווים";
            await JS.InvokeVoidAsync("alert", msg);
            return;
        }


        var response = await Http.PostAsJsonAsync($"api/Generator/{UserID}/UpdateGame", myGame);
        if (response.IsSuccessStatusCode) {
            Navigate();
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "Not Update" => "We did not update the game.",
                "Didnt Get Law" => "We did not get the law.",
                _ => "An unknown error occurred."
            };
            await JS.InvokeVoidAsync("alert", msg);

        }
    }


    void ShowPopUp(LawsDTO LawToDelete) {
        lawToDelete = LawToDelete;
        popupMessage = "למחוק את החוק: " + lawToDelete.Title + "?";
        goBack = false;
        isPopupVisible = true; // Show the popup
    }

    void ShowReturnPopup() {
        popupMessage = "לחזור לדף המשחקים מבלי לשמור את שם ופרומט המשחק?";
        goBack = true;
        isPopupVisible = true; // Show the popup
    }

    private async Task OnPopupConfirm(bool isConfirmed) {
        isPopupVisible = false; // Hide the popup
        if (isConfirmed) {
            if (goBack) {
                Navigate();
            }
            else {
                await DeleteLaw(lawToDelete); // If confirmed, delete the law.
            }
            goBack = false;
        }

    }

    async Task DeleteLaw(LawsDTO LawToDelete) {
        var response = await Http.DeleteAsync($"api/Generator/{UserID}/DeleteLaw/{LawToDelete.LawID}");
        if (response.IsSuccessStatusCode) {
            myGame.LawList.Remove(LawToDelete);
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "Not Delete" => "Did not delete the law.",
                _ => "An unknown error occurred."
            };
            await JS.InvokeVoidAsync("alert", msg);

        }
    }

    void Navigate() => nav.NavigateTo($"./MyGames/{UserID}");
}