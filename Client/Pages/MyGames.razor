@page "/MyGames/{UserID:int}"
@inject HttpClient Http;
@inject NavigationManager nav;
@using NewBlazorProjecct.Shared.DTOs;



<h3>UserID: @UserID</h3>
@msg

<input type="text" placeholder="הקלד שם למשחק חדש" @bind="gameNameToAdd" />
<button @onclick="AddNewGame">הוסף משחק</button>

@if (myUser != null && myUser.GameList != null) {
    <table>
        <tr>
            <th> Game Name </th>
            <th> Game Code </th>
            <th> Amount of Law's </th>
            <th> עריכה:  </th>
            <th> Is Publish </th>
            <th> מחיקה: </th>
        </tr>

        @if (myUser.GameList.Count > 0) {
            foreach (GameLawCount Game in myUser.GameList) {
                <tr>
                    <td> @Game.GameName </td>
                    <td> @Game.GameCode </td>
                    <td> @Game.LawsNumber </td>
                    <td> <button @onclick="(()=> Navigate(Game.GameCode))"> עריכה </button> </td>
                    <td>
                        @if (Game.CanPublish == false) {
                            <input type="checkbox" disabled />
                        }
                        else {
                            <input type="checkbox" checked="@Game.IsPublish" @onchange="(() =>changePublish( Game))" />
                        }
                    </td>
                    <td> <button @onclick="( ()=> DeleteGame(Game) )"> מחיקה </button> </td>
                </tr>
            }
        }
        else {
            <td> אין משחקים </td>
        }

    </table>
}



@code {

    [Parameter]
    public int UserID { get; set; }
    // [Parameter]// צריך לבדוק האם זה צריך להיות פרמטר
    // public int GameID { get; set; }

    User myUser = new User();
    string gameNameToAdd = "";
    string msg = "";


    protected override async Task OnInitializedAsync() {
        var userResponse = await Http.GetAsync("api/Generator/" + UserID + "/GetGames");
        if (userResponse.IsSuccessStatusCode) {
            myUser = await userResponse.Content.ReadFromJsonAsync<User>();
        }
        else {
            string error = await userResponse.Content.ReadAsStringAsync();
            switch (error) {
                case "No User":
                    msg = "Didn't find the user.";
                    break;
                default:
                    msg = "An error occurred.";
                    break;

            }

        }
    }



    async Task AddNewGame() {
        var response = await Http.GetAsync("api/Generator/" + UserID + "/AddGame/" + gameNameToAdd);
        if (response.IsSuccessStatusCode) {
            GameLawCount newGame = response.Content.ReadFromJsonAsync<GameLawCount>().Result;
            myUser.GameList.Add(newGame);
            // GameID = newGame.GameID;
            Navigate(newGame.GameCode);
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            switch (error) {
                case "Not Insert":
                    msg = "Didn't insert the game";
                    break;
                case "Not Update":
                    msg = "Did not update the game code.";
                    break;
                case "Not Get":
                    msg = "didn't got the game";
                    break;
                default:
                    msg = "An error occurred.";
                    break;
            }

        }
    }


    void Navigate(int gameCode) {
        // GameID = Gameid;
        nav.NavigateTo("./EditGame/" + gameCode + "/" + UserID);
    }

    public async Task DeleteGame(GameLawCount gameToDelete) {
        var respons = await Http.DeleteAsync("api/Generator/" + UserID + "/DeleteGame/" + gameToDelete.GameID);
        if (respons.IsSuccessStatusCode) {
            myUser.GameList.Remove(gameToDelete);
        }
        else {
            string error = await respons.Content.ReadAsStringAsync();
            switch (error) {
                case "Not Delete":
                    msg = "Didn't delete the game.";
                    break;
                default:
                    msg = "An error occurred.";
                    break;

            }

        }
    }


    protected async Task changePublish(GameLawCount game) {
        PublishGame gameToSend = new PublishGame();
        gameToSend.GameID = game.GameID;
        gameToSend.IsPublish = !game.IsPublish;

        var userRes = await Http.PostAsJsonAsync("api/Generator/" + UserID + "/PublishGame", gameToSend);
        if (userRes.IsSuccessStatusCode == true) {
            GameLawCount updatedGame = userRes.Content.ReadFromJsonAsync<GameLawCount>().Result;
            int index = myUser.GameList.IndexOf(game);
            myUser.GameList[index] = updatedGame;

            if (gameToSend.IsPublish != updatedGame.IsPublish) {
                msg = "Can't publish the game";
            }

        }
        else {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error) {
                case "Update Failed":
                    msg = "Failed to update";
                    break;
                case "not get game":
                    msg = "we didnt got the game";
                    break;
                default:
                    msg = "An error occurred.";
                    break;
            }

        }
    }



}

