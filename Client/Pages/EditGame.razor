@page "/EditGame/{GameCode:int}/{UserID:int}"
@inject HttpClient Http
@inject NavigationManager nav
@using NewBlazorProjecct.Shared.DTOs
@if (msg != "") {
    <h1>@msg</h1>
}


@if (myGame != null) {
    <div class="container">
        <header class="d-flex justify-content-between align-items-center py-3 border-bottom h-20">
            <button class="btn btn-secondary returnbutton" @onclick="ShowReturnPopup">חזרה לטבלת המשחקים </button>
            <h1>עריכת משחק</h1>
            <button class="btn btn-primary updatebutton" @onclick="UpdateGame">עדכון משחק</button>
        </header>

        <div class="row h-70" style="max-height:70%;">

            <div class="col-md-6 h-100 rightSide">

                <div class="gamenamebox p-2 border">

                    <div class="col ps-2">
                        <div class="d-flex align-items-center ">

                            <div class="d-flex align-items-center ">

                                <p style="margin:0; margin-left:.3rem;">שם המשחק</p>
                                <Tooltip Title="שם המשחק יכול להכיל עד 15 תווים">
                                    <span class="info-icon">
                                        <span class="info-circle">i</span>
                                    </span>
                                </Tooltip>

                            </div>

                            <span style="font-size:.6rem;">@myGame.GameName.Length /15</span>

                        </div>
                        <input type="text" @bind="myGame.GameName" class="default-input @inputClass"
                               @bind:event="oninput" @onkeyup="countChars" maxlength="15" />
                        <br>
                        
                    </div>


                    <div class="col ps-2">
                        <div class="d-flex align-items-center ">
                            <div style="margin:0; margin-left:.3rem;"> חלוקת ניקוד </div>
                            <Tooltip Title="בלחיצה על כפתור זה, נחליט אם לחלק את הנקודות באופן שווה או אקראי">
                                <span class="info-icon">
                                    <span class="info-circle">i</span>
                                </span>
                            </Tooltip>
                        </div>

                        <label class="d-flex align-items-center">
                            <span class="me-2 @spanEqualClass"> שווה </span>
                            <div class="checkbox-wrapper-25">
                                <input type="checkbox" checked="@myGame.ScoreFormat" @onchange="changeFormat">
                            </div>
                            <span class="ms-2 @spanRandomClass"> אקראית </span>
                        </label>
                    </div>


                </div>

                <div class="newrule  p-2 border">
                    @if (singleLaw == null) {
                        <p> @updateOrNewLawText </p>
                        <button class="btn btn-primary" @onclick="AddLaw">הוספת חוק חדש </button>

                    }
                    else {
                        <div class="d-flex align-items-center mb-2">
                            <p style="margin:0; margin-left:.3rem;"> @updateOrNewLawText </p>
                            <Tooltip Title="שם החוק יכול להכיל עד 20 תווים">
                                <span class="info-icon">
                                    <span class="info-circle">i</span>
                                </span>
                            </Tooltip>
                        </div>
                        <input type="text" @bind="singleLaw.Content" class=" Ldefault-input @LinputClass"
                               @bind:event="oninput" @onkeyup="countCharsLaws" maxlength="20" />
                        <br />

                        <button class="btn btn-primary" @onclick="CheckLawSaving">שמירת החוק</button>
                    }
                </div>
            </div>

            <div class="col-md-6 h-100">
                <div class="rulestable p-3 border">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>חוק</th>
                                <th>עריכה</th>
                                <th>מחיקה</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (myGame?.LawList == null || myGame.LawList.Count == 0) {
                                <tr>
                                    <td colspan="3">אין חוקים קיימים. </td>
                                </tr>
                            }
                            else {
                                @foreach (var law in myGame.LawList) {
                                    <tr>
                                        <td>@law.Content</td>
                                        <td><button class="btn btn-warning" @onclick="(() => SendLawToUpdate(law))">עריכה</button></td>
                                        <td><button class="btn btn-danger" @onclick="(() => ShowPopUp(law))">מחיקה</button></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
else {
    <p>טוען נתוני משחק.. </p>
}

@if (isPopupVisible) {
    <PopUp Message="@popupMessage" OnConfirm="OnPopupConfirm" />

}



@code {
    [Parameter] public int UserID { get; set; }
    [Parameter] public int GameCode { get; set; }
    string msg = "";
    Game myGame; // contain the whole game.
    LawsDTO singleLaw; // will contain a single law so we can update him.
    bool editState = false; // Add or Update law, true is for Update and false is for Add.

    LawsDTO lawToDelete = new LawsDTO();
    string updateOrNewLawText = "הוספת חוק חדש";
    string popupMessage = "";
    bool isPopupVisible = false;

    bool goBack = false; // to check if we go back page or delete law. false = delete law, trou = go back.

    string inputClass = "";
    string LinputClass = "";

    string spanEqualClass = "";
    string spanRandomClass = "";


    void countChars() {
        int charLength = myGame.GameName.Length;
        switch (charLength) {
            case < 3:
                inputClass = "danger-input";
                break;
            case >= 3 and <= 10:
                inputClass = "good-input";
                break;
            case > 10 and <= 14:
                inputClass = "warnning-input";
                break;
            case > 14:
                inputClass = "danger-input";
                break;
            default:
                inputClass = "";
                break;
        }
    }
    void countCharsLaws() {
        int lawsLength = singleLaw.Content.Length;
        switch (lawsLength) {
            case < 2:
                LinputClass = "Ldanger-input";
                break;
            case > 2 and <= 15:
                LinputClass = "Lgood-input";
                break;
            case > 15 and <= 19:
                LinputClass = "Lwarnning-input";
                break;
            case > 19:
                LinputClass = "Ldanger-input";
                break;
            default:
                LinputClass = "";
                break;
        }
    }

    protected override async Task OnInitializedAsync() {
        var response = await Http.GetAsync($"api/Generator/{UserID}/GetOneGame/{GameCode}");
        if (response.IsSuccessStatusCode) {
            myGame = await response.Content.ReadFromJsonAsync<Game>();
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "No Game Code" => "We do not have a game with this code.",
                "No Laws" => "This game does not have any laws",
                _ => "An unknown error occurred."
            };
        }
        countChars();
        HighlightText();
    }

    public void AddLaw() => singleLaw = new LawsDTO();

    void SendLawToUpdate(LawsDTO lawToUpdate) {
        singleLaw = lawToUpdate;
        editState = true;
    }
    async void CheckLawSaving() {
        if (string.IsNullOrEmpty(singleLaw.Content) || singleLaw.Content.Length < 3 || singleLaw.Content.Length > 15) {
            msg = "שם המשחק צריך להיות בין 3-15 תווים.";
            return;
        }

        if (editState) {
            updateOrNewLawText = "עדכון חוק";
            await UpdateLaw();
        }
        else {
            updateOrNewLawText = "הוספת חוק חדש";
            await AddNewLaw();
        }
    }

    async Task UpdateLaw() {
        var response = await Http.PostAsJsonAsync($"api/Generator/{UserID}/UpdateLaw", singleLaw);
        if (response.IsSuccessStatusCode) {
            var newLaw = await response.Content.ReadFromJsonAsync<LawsDTO>();
            int index = myGame.LawList.IndexOf(singleLaw);
            myGame.LawList[index] = newLaw;
            editState = false;
            singleLaw = null;
            updateOrNewLawText = "הוספת חוק חדש";
            StateHasChanged(); // Ensure the UI updates
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "Didnt Update" => "We did not update the law.",
                "Didnt Get Law" => "We did not get the law.",
                _ => "An unknown error occurred."
            };
        }
    }

    async Task AddNewLaw() {
        var response = await Http.GetAsync($"api/Generator/{UserID}/AddNewLaw/{myGame.GameID}/{singleLaw.Content}");
        if (response.IsSuccessStatusCode) {
            var newLaw = await response.Content.ReadFromJsonAsync<LawsDTO>();
            if (newLaw != null) {
                myGame.LawList.Add(newLaw);
                singleLaw = null;
                StateHasChanged(); // Ensure the UI updates
            }
            else {
                msg = "Failed to parse new law.";
            }
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "Not Save Law" => "We did not save the law.",
                "Not Get Law" => "We did not get the law.",
                _ => "An unknown error occurred."
            };
        }
    }
    void changeFormat() {
        myGame.ScoreFormat = !myGame.ScoreFormat; // Toggle the value
        HighlightText();
    }

    void HighlightText() {
        if (myGame.ScoreFormat) {
            spanEqualClass = "Bold";
            spanRandomClass = "Normal";
        }
        else {
            spanEqualClass = "Normal";
            spanRandomClass = "Bold";
        }
    }

    async Task UpdateGame() {
        if (string.IsNullOrEmpty(myGame.GameName) || myGame.GameName.Length < 3 || myGame.GameName.Length > 15) {
            msg = "שם המשחק צריך להיות בין 3-15 תווים.";
            return;
        }

        var response = await Http.PostAsJsonAsync($"api/Generator/{UserID}/UpdateGame", myGame);
        if (response.IsSuccessStatusCode) {
            Navigate();
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "Not Update" => "We did not update the game.",
                "Didnt Get Law" => "We did not get the law.",
                _ => "An unknown error occurred."
            };
        }
    }


    void ShowPopUp(LawsDTO LawToDelete) {
        lawToDelete = LawToDelete;
        popupMessage = "למחוק את החוק: " + lawToDelete.Content + "?";
        goBack = false;
        isPopupVisible = true; // Show the popup
    }

    void ShowReturnPopup() {
        popupMessage = "לחזור לדף המשחקים מבלי לשמור את שם ופרומט המשחק?";
        goBack = true;
        isPopupVisible = true; // Show the popup
    }

    private async Task OnPopupConfirm(bool isConfirmed) {
        isPopupVisible = false; // Hide the popup
        if (isConfirmed) {
            if (goBack) {
                Navigate();
            }
            else {
                await DeleteLaw(lawToDelete); // If confirmed, delete the law.
            }
        }

    }

    async Task DeleteLaw(LawsDTO LawToDelete) {
        var response = await Http.DeleteAsync($"api/Generator/{UserID}/DeleteLaw/{LawToDelete.LawID}");
        if (response.IsSuccessStatusCode) {
            myGame.LawList.Remove(LawToDelete);
        }
        else {
            string error = await response.Content.ReadAsStringAsync();
            msg = error switch {
                "Not Delete" => "Did not delete the law.",
                _ => "An unknown error occurred."
            };
        }
    }

    void Navigate() => nav.NavigateTo($"./MyGames/{UserID}");
}